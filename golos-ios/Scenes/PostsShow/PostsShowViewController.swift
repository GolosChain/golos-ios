//
//  PostsShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 16.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift
import SwiftTheme
import Localize_Swift

// MARK: - Input & Output protocols
protocol PostsShowDisplayLogic: class {
    func displayLoadPosts(fromViewModel viewModel: PostsShowModels.Items.ViewModel)
}

class PostsShowViewController: GSTableViewController, ContainerViewSupport {
    // MARK: - Properties
    var selectedButton: UIButton!
    var postFeedTypes: [PostsFeedType]  =   [ .lenta, .popular, .actual, .new, .promo ]

    var interactor: PostsShowBusinessLogic?
    var router: (NSObjectProtocol & PostsShowRoutingLogic & PostsShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var buttonsStackView: UIStackView!
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            scrollView.delegate = self
            
            // Handler horizontal scrolling
            self.handlerHorizontalScrolling     =   { [weak self] contentOffsetX in
                self?.lineView.transform = CGAffineTransform(translationX: (self?.selectedButton.frame.minX)! - (self?.buttonsStackView.spacing)! - contentOffsetX, y: 0)
            }
        }
    }
    
    @IBOutlet weak var lineView: UIView! {
        didSet {
            self.lineView.frame.origin = CGPoint(x: self.buttonsStackView.spacing, y: lineView.frame.minY)
        }
    }
    
    @IBOutlet weak var lineViewWidthConstraint: NSLayoutConstraint! {
        didSet {
            self.selectedButton                 =   self.buttonsStackView.arrangedSubviews.first(where: { $0.tag == 0 }) as? UIButton
            lineViewWidthConstraint.constant    =   self.selectedButton.frame.width
        }
    }

    @IBOutlet weak var statusBarView: UIView! {
        didSet {
            statusBarView.tune(withThemeColorPicker: darkModerateBlueColorPickers)
        }
    }
    
    @IBOutlet var buttonsCollection: [UIButton]! {
        didSet {
            self.buttonsCollection.forEach({ actionButton in
                actionButton.tune(withTitle:        actionButton.titleLabel?.text ?? "XXX",
                                  hexColors:        [veryLightGrayColorPickers, veryLightGrayColorPickers, veryLightGrayColorPickers, veryLightGrayColorPickers],
                                  font:             UIFont(name: "SFUIDisplay-Regular", size: 13.0),
                                  alignment:        .center)
            })
        }
    }
    
    @IBOutlet weak var lentaButton: UIButton!
    
    @IBOutlet weak var shadowView: UIView! {
        didSet {
            shadowView.setGradientBackground(colors: [UIColor.lightGray.cgColor, UIColor.lightText.cgColor], onside: .bottom)
        }
    }
    

    // ContainerViewSupport implementation
    @IBOutlet weak var containerView: GSContainerView! {
        didSet {
            self.containerView.mainVC            =   self
            self.containerView.viewControllers   =   self.getContainerViewControllers()

            self.containerView.setActiveViewController(index: 0)
        }
    }

    @IBOutlet weak var contentViewWidthConstraint: NSLayoutConstraint!
    
    @IBOutlet weak var lineViewLeadingConstraint: NSLayoutConstraint!
    
    @IBOutlet var heightsCollection: [NSLayoutConstraint]! {
        didSet {
            _ = heightsCollection.map({ $0.constant *= heightRatio })
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)

        NotificationCenter.default.removeObserver(self)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PostsShowInteractor()
        let presenter               =   PostsShowPresenter()
        let router                  =   PostsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        self.lineViewWidthConstraint.constant   =   self.selectedButton.frame.width
        self.lineView.transform                 =   CGAffineTransform(translationX: self.selectedButton.frame.minX - self.buttonsStackView.spacing - self.scrollView.contentOffset.x, y: 0)
            
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.3) {
            self.scrollHorizontalTo(sender: self.selectedButton)
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.tune()
        self.containerView.mainVC = self
        self.containerView.setActiveViewController(index: 0)

        NotificationCenter.default.addObserver(self, selector: #selector(localizeTitles), name: NSNotification.Name(LCLLanguageChangeNotification), object: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        UIApplication.shared.statusBarStyle = .lightContent
        self.hideNavigationBar()
        self.lentaButton.isHidden = User.current == nil
        self.localizeTitles()

        // Load Posts
        self.loadPosts(false)
    }
    
    
    // MARK: - Custom Functions
    override func localizeTitles() {
        self.buttonsCollection.forEach({ $0.setTitle($0.titleLabel!.text!.localized(), for: .normal) })
        self.buttonsStackView.layoutIfNeeded()
        
        // Set UIStackView spacing
        if self.buttonsStackView.frame.width < UIScreen.main.bounds.width {
            self.buttonsStackView.spacing               +=  (UIScreen.main.bounds.width - self.buttonsStackView.frame.width) / 6
            self.lineViewLeadingConstraint.constant     =   self.buttonsStackView.spacing
//            self.contentViewWidthConstraint.constant    =   UIScreen.main.bounds.width
        }

        self.selectedButton = self.buttonsStackView.arrangedSubviews.filter({ $0.isHidden == false })[self.selectedButton.tag + 1] as? UIButton
    }
    
    private func scrollHorizontalTo(sender: UIButton) {
        self.selectedButton = sender
        self.selectedButton.theme_setTitleColor(whiteColorPickers, forState: .normal)
        _ = self.buttonsCollection.filter({ $0 != sender }).map({ $0.theme_setTitleColor(veryLightGrayColorPickers, forState: .normal )})
        
        let offsetMinX = sender.frame.minX - scrollView.contentOffset.x
        let offsetMaxX = sender.frame.maxX - scrollView.contentOffset.x
        
        UIView.animate(withDuration: 0.2, animations: {
            self.lineView.transform = CGAffineTransform(translationX: self.selectedButton.frame.minX - self.buttonsStackView.spacing - self.scrollView.contentOffset.x, y: 0)
            self.lineViewWidthConstraint.constant = sender.frame.width
            
            UIView.animate(withDuration: 0.2) {
                self.view.layoutIfNeeded()
            }
        })
        
        if !statusBarView.frame.contains(CGPoint(x: offsetMinX, y: 0)) || !statusBarView.frame.contains(CGPoint(x: offsetMaxX, y: 0)) {
            switch sender.tag {
            case 0, 1:
                self.scrollView.scrollRectToVisible(CGRect(origin: .zero, size: sender.frame.size), animated: true)
                
            // 3, 4
            default:
                let lastView    =   buttonsStackView.arrangedSubviews.first(where: { $0.tag == 6 })
                let visibleRect =   CGRect(origin: lastView!.frame.origin, size: CGSize(width: lastView!.frame.width + self.buttonsStackView.spacing, height: lastView!.frame.height))
                self.scrollView.scrollRectToVisible(visibleRect, animated: true)
            }
        }
    }
    
    
    private func setActiveViewControllerHandlers() {
        if let activeVC = self.containerView.activeVC {
            // Create queue
            let queueFetchPosts = DispatchQueue.global(qos: .background)
            
            // Run queue in Async Thread
            queueFetchPosts.async {
                // Add cells from XIB
                activeVC.fetchPosts(byParameters: (author: User.current?.name, postFeedType: self.postFeedTypes[self.selectedButton.tag], permlink: nil, sortBy: nil))
            }
        
            // Handler Refresh/Upload data
            activeVC.handlerRefreshData                         =   { [weak self] lastItem in
                self?.interactor?.save(lastItem: lastItem)
                self?.loadPosts(lastItem == nil)
            }

            activeVC.handlerAnswerButtonTapped                  =   { [weak self] postShortInfo in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerReplyTypeButtonTapped               =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerShareButtonTapped                   =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerUpvotesButtonTapped                 =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerCommentsButtonTapped                =   { [weak self] postShortInfo in
                self?.interactor?.save(post: postShortInfo)
                self?.router?.routeToPostShowScene(withScrollToComments: true)
            }
            
            activeVC.handlerSelectItem                          =   { [weak self] selectedPost in
                if let post = selectedPost as? PostCellSupport {
                    self?.interactor?.save(post: PostShortInfo(title:               post.title,
                                                               author:              post.author,
                                                               permlink:            post.permlink,
                                                               indexPath:           nil,
                                                               parentAuthor:        post.parentAuthor,
                                                               parentPermlink:      post.parentPermlink))
                    
                    self?.router?.routeToPostShowScene(withScrollToComments: false)
                }
            }
            
            activeVC.handlerAuthorProfileImageButtonTapped      =   { [weak self] userName in
                self?.router?.routeToUserProfileScene(byUserName: userName)
            }
        }
    }
    
    private func getContainerViewControllers() -> [GSTableViewController] {
        let lentaPostsShowVC                    =   UIStoryboard(name: "PostsShow", bundle: nil)
                                                        .instantiateViewController(withIdentifier: "LentaPostsShowVC") as! GSTableViewController
        
        lentaPostsShowVC.title                  =   "Lenta"
        lentaPostsShowVC.cellIdentifier         =   "LentaPostTableViewCell"
    
        
        let popularPostsShowVC                  =   UIStoryboard(name: "PostsShow", bundle: nil)
                                                        .instantiateViewController(withIdentifier: "PopularPostsShowVC") as! GSTableViewController
       
        popularPostsShowVC.title                =   "Popular"
        popularPostsShowVC.cellIdentifier       =   "PopularPostTableViewCell"


        let actualPostsShowVC                   =   UIStoryboard(name: "PostsShow", bundle: nil)
                                                        .instantiateViewController(withIdentifier: "ActualPostsShowVC") as! GSTableViewController
        
        actualPostsShowVC.title                 =   "Actual"
        actualPostsShowVC.cellIdentifier        =   "ActualPostTableViewCell"

        
        let newPostsShowVC                      =   UIStoryboard(name: "PostsShow", bundle: nil)
                                                        .instantiateViewController(withIdentifier: "NewPostsShowVC") as! GSTableViewController
       
        newPostsShowVC.title                    =   "New"
        newPostsShowVC.cellIdentifier           =   "NewPostTableViewCell"

        
        let promoPostsShowVC                =   UIStoryboard(name: "PostsShow", bundle: nil)
                                                        .instantiateViewController(withIdentifier: "PromoPostsShowVC") as! GSTableViewController
        
        promoPostsShowVC.title              =   "Promo"
        promoPostsShowVC.cellIdentifier     =   "PromoPostTableViewCell"
        
        
        let segmentControllers      =   User.current == nil ?   [ popularPostsShowVC, actualPostsShowVC, newPostsShowVC, promoPostsShowVC ] :
                                                                [ lentaPostsShowVC, popularPostsShowVC, actualPostsShowVC, newPostsShowVC, promoPostsShowVC ]

        return segmentControllers
    }
    
    
    // MARK: - Actions
    @IBAction func buttonTapped(_ sender: UIButton) {
        // Scroll content to first row
        if self.selectedButton == sender {
            if let activeVC = self.containerView.activeVC, let tableView = activeVC.tableView, tableView.contentOffset.y > 0.0 {
                activeVC.tableView.scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: true)
            }
        }
        
        else {
//            self.containerView.setActiveViewController(index: sender.tag)
//            self.loadPosts(false)
        }
        
        self.setActiveViewControllerHandlers()
        self.scrollHorizontalTo(sender: sender)
    }
}


// MARK: - PostsShowDisplayLogic
extension PostsShowViewController: PostsShowDisplayLogic {
    func displayLoadPosts(fromViewModel viewModel: PostsShowModels.Items.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let error = viewModel.error {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        self.fetchPosts()
    }
}


// MARK: - Load data from Blockchain by API
extension PostsShowViewController {
    private func loadPosts(_ isRefresh: Bool) {
        // Create queue
        let queueLoadPosts = DispatchQueue.global(qos: .background)
        
        // Run queue in Async Thread
        queueLoadPosts.async {
            let loadPostsRequestModel = PostsShowModels.Items.RequestModel(postFeedType: self.postFeedTypes[self.selectedButton.tag])
            self.interactor?.loadPosts(withRequestModel: loadPostsRequestModel)
        }
    }
}


// MARK: - Fetch data from CoreData
extension PostsShowViewController {
    // User Profile
    private func fetchPosts() {
        self.setActiveViewControllerHandlers()
    }
}
