//
//  PostShowRouter.swift
//  golos-ios
//
//  Created by msm72 on 31.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
@objc protocol PostShowRoutingLogic {
    func routeToUserProfileScene(byUserName name: String)
    func routeToPostCreateScene(withType sceneType: SceneType)
    func routeToActiveVotersShowScene(asPost: Bool, withMode sceneMode: ActiveVoterMode)
}

protocol PostShowDataPassing {
    var dataStore: PostShowDataStore? { get }
}

class PostShowRouter: NSObject, PostShowRoutingLogic, PostShowDataPassing {
    // MARK: - Properties
    weak var viewController: PostShowViewController?
    var dataStore: PostShowDataStore?
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Routing
    func routeToPostCreateScene(withType sceneType: SceneType) {
        let storyboard          =   UIStoryboard(name: "PostCreate", bundle: nil)
        let destinationVC       =   storyboard.instantiateViewController(withIdentifier: "PostCreateVC") as! PostCreateViewController
        destinationVC.sceneType =   sceneType
        var destinationDS       =   destinationVC.router!.dataStore!
        
        passDataToPostCreateScene(postShortInfo: sceneType == .createComment ? self.dataStore!.postShortInfo! : self.dataStore!.comment!, destination: &destinationDS)
        navigateToPostCreateScene(source: viewController!, destination: destinationVC)
        
        // Handlers
        destinationVC.handlerSuccessCreatedItem             =   { [weak self] permlinkCreatedItem in
            // Reload posts in selected list
            if permlinkCreatedItem == "" {
                self?.viewController?.permlinkCreatedItem   =   ""
                self?.viewController?.isPostContentModify   =   false
            }
            
            else {
                self?.viewController?.permlinkCreatedItem   =   permlinkCreatedItem
                self?.viewController?.isPostContentModify   =   true
                self?.viewController?.loadPostComments()
            }
        }
    }
    
    func routeToUserProfileScene(byUserName name: String) {
        let storyboard          =   UIStoryboard(name: "UserProfileShow", bundle: nil)
        let destinationVC       =   storyboard.instantiateViewController(withIdentifier: "UserProfileShowVC") as! UserProfileShowViewController
        destinationVC.sceneMode =   .preview
        var destinationDS       =   destinationVC.router!.dataStore!

        passDataToUserProfileScene(userName: name, destination: &destinationDS)
        navigateToUserProfileScene(source: viewController!, destination: destinationVC)
    }
    
    func routeToActiveVotersShowScene(asPost: Bool, withMode sceneMode: ActiveVoterMode) {
        let storyboard                  =   UIStoryboard(name: "ActiveVotersShow", bundle: nil)
        let destinationVC               =   storyboard.instantiateViewController(withIdentifier: "ActiveVotersShowVC") as! ActiveVotersShowViewController
        var destinationDS               =   destinationVC.router!.dataStore!
        destinationDS.activeVoterMode   =   sceneMode
        
        passDataToUsersVoteShowScene(source: self.dataStore!, destination: &destinationDS, asPost: asPost)
        navigateToUsersVoteShowScene(source: viewController!, destination: destinationVC)
    }

    
    // MARK: - Navigation
    func navigateToPostCreateScene(source: PostShowViewController, destination: PostCreateViewController) {
        source.show(destination, sender: nil)
    }

    func navigateToUserProfileScene(source: PostShowViewController, destination: UserProfileShowViewController) {
        source.show(destination, sender: nil)
    }
    
    func navigateToUsersVoteShowScene(source: PostShowViewController, destination: ActiveVotersShowViewController) {
        source.show(destination, sender: nil)
    }
    
    
    // MARK: - Passing data
    func passDataToPostCreateScene(postShortInfo: PostShortInfo, destination: inout PostCreateDataStore) {
        destination.commentTitle            =   postShortInfo.title
        destination.commentParentTag        =   postShortInfo.parentTag
        destination.commentParentAuthor     =   postShortInfo.author
        destination.commentParentPermlink   =   postShortInfo.permlink
    }

    func passDataToUserProfileScene(userName: String, destination: inout UserProfileShowDataStore) {
        destination.userNickName    =   userName
    }
    
    func passDataToUsersVoteShowScene(source: PostShowDataStore, destination: inout ActiveVotersShowDataStore, asPost: Bool) {
        destination.itemID                  =   asPost ? source.postShortInfo!.id : source.comment!.id
        destination.permlink                =   asPost ? source.postShortInfo!.permlink : source.comment!.permlink
        destination.authorNickName          =   asPost ? source.postShortInfo!.author : source.comment!.author
        destination.votersCount             =   asPost ? source.postShortInfo?.activeVotesCount : source.comment?.activeVotesCount
    }
}
