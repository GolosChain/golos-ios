//
//  PostShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 31.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
protocol PostShowDisplayLogic: class {
    func displayLoadContent(fromViewModel viewModel: PostShowModels.Post.ViewModel)
}

class PostShowViewController: GSBaseViewController {
    // MARK: - Properties
    var interactor: PostShowBusinessLogic?
    var router: (NSObjectProtocol & PostShowRoutingLogic & PostShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var coverImageView: UIImageView!
    @IBOutlet weak var postFeedHeaderView: PostFeedHeaderView!
    
    @IBOutlet weak var contentView: UIView! {
        didSet {
            contentView.tune()
        }
    }
    
    @IBOutlet weak var navbarView: UIView! {
        didSet {
            navbarView.tune()
            navbarView.add(shadow: true, onside: .bottom)
        }
    }
    
    @IBOutlet weak var titleLabel: UILabel! {
        didSet {
            titleLabel.tune(withText:           "",
                            hexColors:          veryDarkGrayWhiteColorPickers,
                            font:               UIFont(name: "SFUIDisplay-Medium", size: 15.0 * widthRatio),
                            alignment:          .left,
                            isMultiLines:       true)
        }
    }
    
    @IBOutlet weak var textLabel: UILabel! {
        didSet {
            textLabel.tune(withText:           "",
                           hexColors:          veryDarkGrayWhiteColorPickers,
                           font:               UIFont(name: "SFUIDisplay-Regular", size: 13.0 * widthRatio),
                           alignment:          .left,
                           isMultiLines:       true)
        }
    }
    
    @IBOutlet weak var upvoteButton: UIButton! {
        didSet {
            upvoteButton.tune(withTitle:        "$23.22",
                              hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                              font:             UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                              alignment:        .left)
            
            upvoteButton.isEnabled      =   false
        }
    }
    
    @IBOutlet weak var usersButton: UIButton! {
        didSet {
            usersButton.tune(withTitle:        "42",
                             hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                             font:             UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                             alignment:        .left)
            
            usersButton.isEnabled       =   false
        }
    }
    
    @IBOutlet weak var commentsButton: UIButton! {
        didSet {
            commentsButton.tune(withTitle:        "50",
                                hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                font:             UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                                alignment:        .left)
            
            commentsButton.isEnabled    =   false
        }
    }
    
    @IBOutlet weak var flauntButton: UIButton! {
        didSet {
            flauntButton.tune(withTitle:        "Flaunt Verb",
                              hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                              font:             UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                              alignment:        .left)
            
            flauntButton.isEnabled      =   false
        }
    }
    
    @IBOutlet weak var promoteButton: UIButton! {
        didSet {
            promoteButton.tune(withTitle:        "Promote Post Verb",
                               hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                               font:             UIFont(name: "SFUIDisplay-Medium", size: 11.0 * widthRatio),
                               alignment:        .center)
            
            promoteButton.isEnabled     =   false
            
            promoteButton.setBorder(color: UIColor(hexString: "#6ad381").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    @IBOutlet weak var donateButton: UIButton! {
        didSet {
            donateButton.tune(withTitle:        "Donate Verb",
                               hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                               font:             UIFont(name: "SFUIDisplay-Medium", size: 11.0 * widthRatio),
                               alignment:        .center)
            
            donateButton.isEnabled      =   true
           
            donateButton.setBorder(color: UIColor(hexString: "#6ad381").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    @IBOutlet var backgroundGrayViewsCollection: [UIView]! {
        didSet {
            _ = backgroundGrayViewsCollection.map({ $0.theme_backgroundColor = veryLightGrayColorPickers })
        }
    }
    
    @IBOutlet weak var commentsTitleLabel: UILabel! {
        didSet {
            commentsTitleLabel.tune(withText:           "Comments Noun",
                                    hexColors:          veryDarkGrayWhiteColorPickers,
                                    font:               UIFont(name: "SFUIDisplay-Regular", size: 14.0 * widthRatio),
                                    alignment:          .left,
                                    isMultiLines:       false)
        }
    }

    @IBOutlet weak var commentsCountLabel: UILabel! {
        didSet {
            commentsCountLabel.tune(withText:           "42",
                                    hexColors:          grayWhiteColorPickers,
                                    font:               UIFont(name: "SFUIDisplay-Regular", size: 14.0 * widthRatio),
                                    alignment:          .left,
                                    isMultiLines:       false)
        }
    }

    @IBOutlet weak var sortByLabel: UILabel! {
        didSet {
            sortByLabel.tune(withText:           "Sort by",
                             hexColors:          grayWhiteColorPickers,
                             font:               UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                             alignment:          .left,
                             isMultiLines:       false)
        }
    }

    @IBOutlet weak var commentsSortByButton: UIButton! {
        didSet {
            commentsSortByButton.tune(withTitle:        "Action Sheet First New",
                                      hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                      font:             UIFont(name: "SFUIDisplay-Regular", size: 10.0 * widthRatio),
                                      alignment:        .center)
            
            commentsSortByButton.isEnabled      =   true
        }
    }

    @IBOutlet weak var commentsHideButton: UIButton! {
        didSet {
            commentsHideButton.tune(withTitle:        "Hide Comments Verb",
                                    hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                    font:             UIFont(name: "SFUIDisplay-Medium", size: 8.0 * widthRatio),
                                    alignment:        .center)
            
            commentsHideButton.isEnabled        =   true
            
            commentsHideButton.setBorder(color: UIColor(hexString: "#dbdbdb").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    
    @IBOutlet var heightsCollection: [NSLayoutConstraint]! {
        didSet {
            _ = heightsCollection.map({ $0.constant *= heightRatio })
        }
    }
    
    @IBOutlet var widthsCollection: [NSLayoutConstraint]! {
        didSet {
            _ = widthsCollection.map({ $0.constant *= widthRatio })
        }
    }
    
    @IBOutlet weak var coverImageViewHeight: NSLayoutConstraint! {
        didSet {
            coverImageViewHeight.constant *= heightRatio
        }
    }
    
    @IBOutlet weak var buttonsStackViewTopConstraint: NSLayoutConstraint! {
        didSet {
            buttonsStackViewTopConstraint.constant = -34.0 * heightRatio * 0.0
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PostShowInteractor()
        let presenter               =   PostShowPresenter()
        let router                  =   PostShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        UIApplication.shared.statusBarStyle = .default
        
        // Load Posts
        self.loadContent()
    }

    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        self.titleLabel.text    =   "d fkajk jdakjd kajsdjf gsfshd fsdjkh jh"
        // jaj hajkjH AH KDJAJKH AHDA JSHD AH DAJD JAHAHJK HKAJ  HAK JHAKD AKSHD Kahd jahksjhkhkKJHKJHKjhgd kakjasdh djkha dhakh"
        
        self.textLabel.text     =   "jaj hajkjH AH KDJAJKH AHDA JSHD AH DAJD JAHAHJK HKAJ  HAK JHAKD AKSHD Kahd jahksjhkhkKJHKJHKjhgd kakjasdh djkha dhakh"
        
        self.coverImageViewHeight.constant = 0
    }
    
    
    // MARK: - Actions
    @IBAction func backButtonTapped(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func moreButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
    
    @IBAction func shareButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
    
    @IBAction func upvoteButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func usersButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func commentsButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func flauntButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func promoteButtonTapped(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#6ad381").cgColor

        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func donateButtonTapped(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#6ad381").cgColor

        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
    
    @IBAction func buttonsTappedDown(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#dbdbdb").cgColor
    }

    @IBAction func sortCommentsByButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func hideCommentsButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
}


// MARK: - PostShowDisplayLogic
extension PostShowViewController: PostShowDisplayLogic {
    func displayLoadContent(fromViewModel viewModel: PostShowModels.Post.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}


// MARK: - Load data from Blockchain by API
extension PostShowViewController {
    private func loadContent() {
        let contentRequestModel = PostShowModels.Post.RequestModel()
        interactor?.loadContent(withRequestModel: contentRequestModel)
    }
}


// MARK: - Fetch data from CoreData
extension PostShowViewController {
    // User Profile
    private func fetchContent() {
        
//        self.postFeedHeaderView.display(<#T##post: PostCellSupport##PostCellSupport#>)
    }
}
