//
//  PostShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 31.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit
import CoreData
import GoloSwift
import SafariServices
import Localize_Swift
import AlignedCollectionViewFlowLayout

// MARK: - Input & Output protocols
protocol PostShowDisplayLogic: class {
    func displaySubscribe(fromViewModel viewModel: PostShowModels.Item.ViewModel)
    func displayLoadContent(fromViewModel viewModel: PostShowModels.Post.ViewModel)
    func displayLoadContentComments(fromViewModel viewModel: PostShowModels.Post.ViewModel)
    func displayCheckFollowing(fromViewModel viewModel: PostShowModels.Following.ViewModel)
    func displayVote(fromViewModel viewModel: PostShowModels.ActiveVote.ViewModel)
}

class PostShowViewController: GSBaseViewController {
    // MARK: - Properties
    var commentsCount: Int64 = 0
    var activeVotesCount: Int = 0
    var scrollCommentsDown: Bool = false
    var isPostContentModify: Bool = false
    var commentsSecondLevel: [Comment] = [Comment]()
    
    var voicePowerView: VoicePowerView?

    var commentsViews = [CommentView]() {
        didSet {
            self.commentsViews.forEach( { commentView in
                // Handlers
                commentView.handlerActiveVoteButtonTapped               =   { [weak self] (isVote, postShortInfo) in
                    // Check network connection
                    guard isNetworkAvailable else {
                        self?.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
                        return
                    }

                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.interactor?.save(comment: postShortInfo)
                    
                    let requestModel = PostShowModels.ActiveVote.RequestModel(isVote: isVote, isFlaunt: false, forPost: false)
                    
                    guard isVote else {
                        self?.showAlertView(withTitle: "Voting Verb", andMessage: "Cancel Vote Message", actionTitle: "ActionChange", needCancel: true, completion: { success in
                            if success {
                                commentView.activeVoteButton.startVote(withSpinner: commentView.activeVoteActivityIndicator)
                                self?.interactor?.vote(withRequestModel: requestModel)
                            } else {
                                commentView.activeVoteButton.breakVote(withSpinner: commentView.activeVoteActivityIndicator)
                            }
                        })
                        
                        return
                    }
                    
                    commentView.activeVoteButton.startVote(withSpinner: commentView.activeVoteActivityIndicator)
                    self?.interactor?.vote(withRequestModel: requestModel)
                }
                
                commentView.handlerUsersButtonTapped                    =   { [weak self] in
                    self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
                }
                
                commentView.handlerCommentsButtonTapped                 =   { [weak self] postShortInfo in
                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.interactor?.save(comment: postShortInfo)
                    self?.router?.routeToPostCreateScene(withType: .createComment)
                }
                
                commentView.handlerReplyButtonTapped                    =   { [weak self] postShortInfo in
                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.interactor?.save(comment: postShortInfo)
                    self?.router?.routeToPostCreateScene(withType: .createCommentReply)
                }
                
                commentView.handlerShareButtonTapped                    =   { [weak self] in
                    self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
                }
                
                commentView.handlerAuthorProfileAddButtonTapped         =   { [weak self] in
                    self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
                }
                
                commentView.handlerAuthorProfileImageButtonTapped       =   { [weak self] authorName in
                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.router?.routeToUserProfileScene(byUserName: authorName)
                }

                commentView.handlerAuthorNameButtonTapped               =   { [weak self] authorName in
                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.router?.routeToUserProfileScene(byUserName: authorName)
                }
                
                // Handler Markdown
                commentView.markdownViewManager.completionErrorAlertView            =   { [weak self] errorMessage in
                    self?.showAlertView(withTitle: "Error", andMessage: errorMessage, needCancel: false, completion: { _ in })
                }

                commentView.markdownViewManager.completionCommentAuthorTapped       =   { [weak self] authorName in
                    guard (self?.isCurrentOperationPossible())! else { return }
                    
                    self?.router?.routeToUserProfileScene(byUserName: authorName)
                }
                
                commentView.markdownViewManager.completionShowSafariURL             =   { [weak self] url in
                    if isNetworkAvailable {
                        let safari = SFSafariViewController(url: url)
                        self?.present(safari, animated: true, completion: nil)
                    }
                        
                    else {
                        self?.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
                    }
                }
            })
        }
    }

    var interactor: PostShowBusinessLogic?
    var router: (NSObjectProtocol & PostShowRoutingLogic & PostShowDataPassing)?
    
    // Handlers
    var handlerPostShowSceneClose: ((Bool) -> Void)?

    
    // MARK: - IBOutlets
    @IBOutlet weak var postFeedHeaderView: PostFeedHeaderView!
    @IBOutlet weak var commentsControlView: UIView!
    @IBOutlet weak var subscribesStackView: UIStackView!
    
    @IBOutlet weak var loadingPostContentActivityIndicator: UIActivityIndicatorView! {
        didSet {
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1) {
                self.loadingPostContentActivityIndicator.startAnimating()
            }
        }
    }
    
    @IBOutlet weak var activeVoteActivityIndicator: UIActivityIndicatorView! {
        didSet {
            self.activeVoteActivityIndicator.stopAnimating()
        }
    }
    
    @IBOutlet weak var flauntActivityIndicator: UIActivityIndicatorView! {
        didSet {
            self.flauntActivityIndicator.stopAnimating()
        }
    }
    
    @IBOutlet var hiddenViewsCollection: [UIView]! {
        didSet {
            self.hiddenViewsCollection.forEach({ $0.alpha = 0.0 })
        }
    }
    
    @IBOutlet weak var commentsViewsView: UIView! {
        didSet {
            self.commentsViewsView.tune(withThemeColorPicker: whiteColorPickers)
            self.commentsViewsView.alpha = 0.0
        }
    }
    
    @IBOutlet weak var subscribeActivityIndicator: UIActivityIndicatorView! {
        didSet {
            self.subscribeActivityIndicator.stopAnimating()
        }
    }
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            self.scrollView.delegate = self
            self.scrollView.isUserInteractionEnabled = !self.scrollCommentsDown
        }
    }
    
    @IBOutlet weak var emptyCommentsButton: UIButton! {
        didSet {
            self.emptyCommentsButton.tune(withTitle:    "No Comments Title".localized(),
                                          hexColors:    [veryDarkGrayWhiteColorPickers, darkGrayWhiteColorPickers, darkGrayWhiteColorPickers, darkGrayWhiteColorPickers],
                                          font:         UIFont(name: "SFProDisplay-Regular", size: 13.0),
                                          alignment:    .left)
            
            self.emptyCommentsButton.isHidden = true
        }
    }

    @IBOutlet weak var markdownViewManager: MarkdownViewManager! {
        didSet {
            // Handler Markdown
            markdownViewManager.completionErrorAlertView            =   { [weak self] errorMessage in
                self?.showAlertView(withTitle: "Error", andMessage: errorMessage, needCancel: false, completion: { _ in })
            }
            
            markdownViewManager.completionCommentAuthorTapped       =   { [weak self] authorName in
                self?.router?.routeToUserProfileScene(byUserName: authorName)
            }
            
            markdownViewManager.completionShowSafariURL             =   { [weak self] url in
                if isNetworkAvailable {
                    let safari = SFSafariViewController(url: url)
                    self?.present(safari, animated: true, completion: nil)
                }
                    
                else {
                    self?.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
                }
            }
        }
    }

    @IBOutlet weak var tagsCollectionView: UICollectionView! {
        didSet {
            tagsCollectionView.register(UINib(nibName:               "PostShowTagCollectionViewCell", bundle: nil),
                                        forCellWithReuseIdentifier:  "PostShowTagCollectionViewCell")
            
            tagsCollectionView.tune()
            tagsCollectionView.delegate     =   self
            tagsCollectionView.dataSource   =   self
            
            tagsCollectionView.collectionViewLayout = AlignedCollectionViewFlowLayout.init(horizontalAlignment: .left, verticalAlignment: .top)
        }
    }
    
//    @IBOutlet weak var voicePowerView: VoicePowerView! {
//        didSet {
//            self.voicePowerView.alpha       =   0.0
//            self.voicePowerView.frame       =   UIScreen.main.bounds
//            self.voicePowerView.center      =   self.view.center
//        }
//    }
    
    @IBOutlet weak var contentView: UIView! {
        didSet {
            contentView.tune()
        }
    }
    
    @IBOutlet weak var navbarView: UIView! {
        didSet {
            navbarView.tune()
        }
    }
    
    @IBOutlet weak var titleLabel: UILabel! {
        didSet {
            titleLabel.tune(withText:           "",
                            hexColors:          veryDarkGrayWhiteColorPickers,
                            font:               UIFont(name: "SFProDisplay-Medium", size: 15.0),
                            alignment:          .left,
                            isMultiLines:       true)
        }
    }
    
    @IBOutlet weak var activeVoteButton: UIButton! {
        didSet {
            activeVoteButton.tune(withTitle:    "",
                              hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                              font:             UIFont(name: "SFProDisplay-Regular", size: 10.0),
                              alignment:        .left)
            
            activeVoteButton.isEnabled  =   true
        }
    }
    
    @IBOutlet weak var usersButton: UIButton! {
        didSet {
            usersButton.tune(withTitle:        "42",
                             hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                             font:             UIFont(name: "SFProDisplay-Regular", size: 10.0),
                             alignment:        .left)
            
            usersButton.isEnabled       =   false
            usersButton.isHidden        =   true
        }
    }
    
    @IBOutlet weak var commentsButton: UIButton! {
        didSet {
            commentsButton.tune(withTitle:      "",
                                hexColors:      [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                font:           UIFont(name: "SFProDisplay-Regular", size: 10.0),
                                alignment:      .left)
            
            commentsButton.isEnabled    =   true
        }
    }
    
    @IBOutlet weak var flauntButton: UIButton! {
        didSet {
            flauntButton.tune(withTitle:        "",
                              hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                              font:             UIFont(name: "SFProDisplay-Regular", size: 10.0),
                              alignment:        .left)
            
            flauntButton.isEnabled      =   true
        }
    }
    
    @IBOutlet weak var promoteButton: UIButton! {
        didSet {
            promoteButton.tune(withTitle:        "Promote Post Verb",
                               hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                               font:             UIFont(name: "SFProDisplay-Medium", size: 11.0),
                               alignment:        .center)
            
            promoteButton.isEnabled     =   false
            
            promoteButton.setBorder(color: UIColor(hexString: "#6ad381").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    @IBOutlet weak var donateButton: UIButton! {
        didSet {
            donateButton.tune(withTitle:        "Donate Verb",
                               hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                               font:             UIFont(name: "SFProDisplay-Medium", size: 11.0),
                               alignment:        .center)
            
            donateButton.isEnabled      =   true
           
            donateButton.setBorder(color: UIColor(hexString: "#6ad381").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    // Subscribe by Topic
    @IBOutlet weak var topicCoverImageView: UIImageView!
    
    @IBOutlet weak var topicPublishedInLabel: UILabel! {
        didSet {
            topicPublishedInLabel.tune(withText:         "Published in",
                                       hexColors:        darkGrayWhiteColorPickers,
                                       font:             UIFont(name: "SFProDisplay-Regular", size: 8.0),
                                       alignment:        .left,
                                       isMultiLines:     false)
        }
    }
    
    @IBOutlet weak var topicTitleLabel: UILabel! {
        didSet {
            topicTitleLabel.tune(withText:         "",
                                 hexColors:        darkGrayWhiteColorPickers,
                                 font:             UIFont(name: "SFProDisplay-Regular", size: 12.0),
                                 alignment:        .left,
                                 isMultiLines:     false)
        }
    }
    
    // Subscribe by User
    @IBOutlet weak var userAvatarImageView: UIImageView!
    
    @IBOutlet weak var userNameLabel: UILabel! {
        didSet {
            userNameLabel.tune(withText:        "",
                               hexColors:       veryDarkGrayWhiteColorPickers,
                               font:            UIFont(name: "SFProDisplay-Regular", size: 12.0),
                               alignment:       .left,
                               isMultiLines:    false)
        }
    }
    
    @IBOutlet weak var userRecentPastLabel: UILabel! {
        didSet {
            userRecentPastLabel.tune(withText:          "Recent Past:",
                                     hexColors:         darkGrayWhiteColorPickers,
                                     font:              UIFont(name: "SFProDisplay-Regular", size: 8.0),
                                     alignment:         .left,
                                     isMultiLines:      false)
        }
    }
    
    @IBOutlet weak var userPreviouslyLabel: UILabel! {
        didSet {
            userPreviouslyLabel.tune(withText:          "Previously:",
                                     hexColors:         darkGrayWhiteColorPickers,
                                     font:              UIFont(name: "SFProDisplay-Regular", size: 8.0),
                                     alignment:         .left,
                                     isMultiLines:      false)
        }
    }
    
    @IBOutlet var subscribeButtonsCollection: [UIButton]! {
        didSet {
            subscribeButtonsCollection.forEach({ button in
                button.tune(withTitle:         "Subscribe",
                            hexColors:         [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                            font:              UIFont(name: "SFProDisplay-Medium", size: 10.0),
                            alignment:         .center)
                
                button.setBorder(color: UIColor(hexString: "#dbdbdb").cgColor, cornerRadius: 4.0 * heightRatio)
            })
        }
    }
    
    @IBOutlet weak var bottomLineView: UIView! {
        didSet {
            bottomLineView.tune(withThemeColorPicker: veryLightGrayColorPickers)
        }
    }
    
    @IBOutlet var backgroundGrayViewsCollection: [UIView]! {
        didSet {
            self.backgroundGrayViewsCollection.forEach({ $0.theme_backgroundColor = veryLightGrayColorPickers })
        }
    }
    
    @IBOutlet weak var commentsTitleLabel: UILabel! {
        didSet {
            commentsTitleLabel.tune(withText:           "Comments Noun",
                                    hexColors:          veryDarkGrayWhiteColorPickers,
                                    font:               UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                    alignment:          .left,
                                    isMultiLines:       false)
        }
    }

    @IBOutlet weak var commentsCountLabel: UILabel! {
        didSet {
            commentsCountLabel.tune(withText:           "",
                                    hexColors:          grayWhiteColorPickers,
                                    font:               UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                    alignment:          .left,
                                    isMultiLines:       false)
        }
    }

    @IBOutlet weak var sortByLabel: UILabel! {
        didSet {
            sortByLabel.tune(withText:           "Sort by",
                             hexColors:          grayWhiteColorPickers,
                             font:               UIFont(name: "SFProDisplay-Regular", size: 10.0),
                             alignment:          .left,
                             isMultiLines:       false)
        }
    }

    @IBOutlet weak var commentsSortByButton: UIButton! {
        didSet {
            commentsSortByButton.tune(withTitle:        "Action Sheet First New",
                                      hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                      font:             UIFont(name: "SFProDisplay-Regular", size: 10.0),
                                      alignment:        .center)
            
            commentsSortByButton.isEnabled  =   true
        }
    }

    @IBOutlet weak var commentsHideButton: UIButton! {
        didSet {
            commentsHideButton.tune(withTitle:        "Hide Comments Verb",
                                    hexColors:        [veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers, veryDarkGrayWhiteColorPickers, lightGrayWhiteColorPickers],
                                    font:             UIFont(name: "SFProDisplay-Medium", size: 8.0),
                                    alignment:        .center)
            
            commentsHideButton.isEnabled    =   true
            commentsHideButton.setBorder(color: UIColor(hexString: "#dbdbdb").cgColor, cornerRadius: 4.0 * heightRatio)
        }
    }
    
    // Collections
    @IBOutlet var circleImagesCollection: [UIView]! {
        didSet {
            circleImagesCollection.forEach({ imageView in
                imageView.layer.cornerRadius = imageView.bounds.width / 2 * widthRatio
                
                if imageView.tag == 0 {
                    imageView.layer.borderWidth     =   1.0
                    imageView.layer.borderColor     =   UIColor(hexString: "#1e1e1e").cgColor
                }
            })
        }
    }
    
    
    @IBOutlet var heightsCollection: [NSLayoutConstraint]! {
        didSet {
            self.heightsCollection.forEach({ $0.constant *= heightRatio })
        }
    }
    
    @IBOutlet var widthsCollection: [NSLayoutConstraint]! {
        didSet {
            self.widthsCollection.forEach({ $0.constant *= widthRatio })
        }
    }
    
    @IBOutlet weak var buttonsStackViewTopConstraint: NSLayoutConstraint! {
        didSet {
            buttonsStackViewTopConstraint.constant = -34.0 * heightRatio * 0.0
        }
    }
    
    @IBOutlet weak var emptyCommentsButtonTopConstraint: NSLayoutConstraint! {
        didSet {
            self.emptyCommentsButtonTopConstraint.constant = -44.0 * heightRatio
        }
    }
    
    @IBOutlet weak var contentViewTopConstraint: NSLayoutConstraint! {
        didSet {
            self.contentViewTopConstraint.constant = 52.0 * heightRatio
        }
    }
    
    @IBOutlet weak var tagsCollectionViewheightConstraint: NSLayoutConstraint!
    @IBOutlet weak var markdownViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var commentsControlViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var commentsViewsViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var commentsViewsViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var subscribesStackViewTopConstraint: NSLayoutConstraint!
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)

        NotificationCenter.default.removeObserver(self)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PostShowInteractor()
        let presenter               =   PostShowPresenter()
        let router                  =   PostShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        Logger.log(message: "Success", event: .severe)
        
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        Logger.log(message: "Success", event: .severe)

        // Handlers
        self.postFeedHeaderView.handlerAuthorTapped         =   { [weak self] userName in
            self?.router?.routeToUserProfileScene(byUserName: userName)
        }
   
        self.postFeedHeaderView.handlerReblogAuthorTapped   =   { [weak self] reblogAuthorName in
            self?.router?.routeToUserProfileScene(byUserName: reblogAuthorName)
        }
        
//        // Load Post
//        let loadPostContentQueue = DispatchQueue.global(qos: .background)
//
//        loadPostContentQueue.sync {
//            self.loadContent()
//            self.runCheckFollowing()
//        }
        
        if let user = User.current {
            let isNamesMatch = user.nickName == self.router?.dataStore?.postShortInfo?.author
            
            self.subscribesStackViewTopConstraint.constant = isNamesMatch ? -100.0 * heightRatio : 0.0
            self.backgroundGrayViewsCollection.first(where: { $0.tag == 0 })?.isHidden = isNamesMatch
            self.contentView.bringSubviewToFront(self.backgroundGrayViewsCollection.first(where: { $0.tag == 1 })!)
            
            UIView.animate(withDuration: 0.3) {
                self.subscribesStackView.isHidden = isNamesMatch
                self.view.layoutIfNeeded()
            }
        }

        NotificationCenter.default.addObserver(self, selector: #selector(localizeTitles), name: NSNotification.Name(LCLLanguageChangeNotification), object: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        Logger.log(message: "Success", event: .severe)

        self.hideNavigationBar()
        UIApplication.shared.statusBarStyle = .default
    }
    
    
    // MARK: - Custom Functions
    private func didCommentsControlView(hided: Bool) {
        Logger.log(message: "Success", event: .severe)

        self.commentsControlViewTopConstraint.constant  =   heightRatio * (hided ? -30.0 : 0.0)
        self.commentsViewsViewTopConstraint.constant    =   hided ? (-1 * self.commentsViewsViewHeightConstraint.constant + 40.0 * heightRatio) : 0.0
        self.commentsControlView.isHidden               =   hided
        self.commentsViewsView.isHidden                 =   hided
        
        if hided {
            self.emptyCommentsButton.isHidden = false
            self.emptyCommentsButtonTopConstraint.constant = 0.0
            
            UIView.animate(withDuration: 0.3) {
                self.view.layoutIfNeeded()
            }
        }
        
        else {
            self.commentsButton.setTitle("\(self.commentsCount)", for: .normal)
            self.commentsCountLabel.text = String(format: "%i", self.commentsCount)
            
            UIView.animate(withDuration: 0.7) {
                self.commentsViewsView.alpha = 1.0
            }
        }
        
        self.scrollView.isUserInteractionEnabled = true

        // Hide loading activity interactior
        self.loadingPostContentActivityIndicator.stopAnimating()
        self.contentViewTopConstraint.constant = 0.0
        
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
        
        if self.scrollCommentsDown {
            self.didContentViewScrollToCommentsView()
        }
    }
    
    private func loadViewSettings() {
        Logger.log(message: "Success", event: .severe)

        if let displayedPost = self.router?.dataStore?.displayedPost {
            self.titleLabel.text                =   displayedPost.title
            self.flauntButton.isEnabled         =   true
            self.activeVoteButton.isEnabled     =   true
            self.flauntButton.isHidden          =   displayedPost.author == User.current!.nickName

            self.flauntActivityIndicator.stopAnimating()
            self.activeVoteActivityIndicator.stopAnimating()
            
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1) {
                self.tagsCollectionView.reloadData()
                self.markdownViewManager.load(markdown: displayedPost.body)
            }
            
            // Load markdown content
            self.markdownViewManager.onRendered = { [weak self] height in
                self?.markdownViewHeightConstraint.constant = height
                
                UIView.animate(withDuration: 0.5, animations: {
                    self?.hiddenViewsCollection.forEach({ $0.alpha = 1.0 })
                })
            }
            
            // Set Active Votes icon
            self.activeVotesCount       =   Int(displayedPost.netVotes)
            self.activeVoteButton.tag   =   displayedPost.currentUserVoted ? 99 : 0
            self.activeVoteButton.setTitle(self.activeVotesCount > 0 ? "\(self.activeVotesCount)" : nil, for: .normal)
            self.activeVoteButton.setImage(UIImage(named: displayedPost.currentUserVoted ? "icon-button-upvotes-selected" : "icon-button-upvotes-default"), for: .normal)

            // Subscribe topic
            if let firstTag = displayedPost.tags?.first {
                self.topicTitleLabel.text = firstTag.transliteration(forPermlink: false).uppercaseFirst
            }
            
            // Subscribe User
            if  let author = self.router?.dataStore?.postShortInfo?.author,
                let user = User.fetch(byNickName: author), let userProfileImageURL = user.profileImageURL {
                
                self.userAvatarImageView.uploadImage(byStringPath:      userProfileImageURL,
                                                     imageType:         .userProfileImage,
                                                     size:              CGSize(width: 50.0, height: 50.0),
                                                     tags:              nil,
                                                     createdDate:       user.created.convert(toDateFormat: .expirationDateType),
                                                     fromItem:          (user as CachedImageFrom).fromItem,
                                                     completion:        { _ in })
            }

            self.userNameLabel.text = self.postFeedHeaderView.authorNameButton.titleLabel!.text
            
            // User action buttons
            if displayedPost.children > 0 {
                self.commentsButton.setTitle("\(displayedPost.children)", for: .normal)
                self.commentsButton.isSelected = displayedPost.currentUserVoted
            }
            
            // Flaunt icon
            self.flauntButton.tag   =   displayedPost.currentUserFlaunted ? 99 : 0
            self.flauntButton.setTitle(displayedPost.netFlaunt > 0 ? "\(displayedPost.netFlaunt)" : nil, for: .normal)
            self.flauntButton.setImage(displayedPost.currentUserFlaunted ? UIImage(named: "icon-button-flaunt-selected") : UIImage(named: "icon-button-flaunt-default"), for: .normal)
        }
    }
    
    override func localizeTitles() {
        Logger.log(message: "Success", event: .severe)
        
        self.tagsCollectionView.reloadData()
        (self.commentsViewsView.subviews as! [CommentView]).forEach({ $0.localizeTitles() })
        
        self.postFeedHeaderView.categoryLabel.text = self.router!.dataStore!.displayedPost!.category
                                                        .transliteration(forPermlink: false)
                                                        .uppercaseFirst
        
        self.donateButton.setTitle("Donate Verb".localized(), for: .normal)
        self.promoteButton.setTitle("Promote Post Verb".localized(), for: .normal)
        self.emptyCommentsButton.setTitle("No Comments Title".localized(), for: .normal)
        self.commentsHideButton.setTitle("Hide Comments Verb".localized(), for: .normal)
        self.commentsSortByButton.setTitle("Action Sheet First New".localized(), for: .normal)
        self.subscribeButtonsCollection.forEach({ $0.setTitle("Subscribe".localized(), for: .normal )})
        
        self.sortByLabel.text = "Sort by".localized()
        self.commentsTitleLabel.text = "Comments Noun".localized()
        self.userRecentPastLabel.text = "Recent Past:".localized()
        self.userPreviouslyLabel.text = "Previously:".localized()
        self.topicPublishedInLabel.text = "Published in".localized()
        
        if let topicTitle = self.router?.dataStore?.displayedPost?.tags?.first?.transliteration(forPermlink: false).uppercaseFirst {
            self.topicTitleLabel.text = topicTitle
        }
    }

    private func didContentViewScrollToCommentsView() {
        Logger.log(message: "Success", event: .severe)

        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5, execute: {
            UIView.animate(withDuration:    0.7,
                           delay:           0.2,
                           options:         .transitionCrossDissolve,
                           animations:      {
                            let bottomViewFrame = self.backgroundGrayViewsCollection.first(where: { $0.tag == 1 })!.frame

                            if self.commentsCount == 0 {
                                self.scrollView.contentOffset.y = 10_000.0
                            }

                            else {
                                self.scrollView.contentOffset.y = bottomViewFrame.maxY
//                                self.scrollView.scrollRectToVisible(CGRect(origin: self.commentsControlView.frame.origin, size: CGSize(width: self.commentsControlView.frame.width, height: max(0, self.commentsViewsView.frame.maxY))), animated: true)
                            }
                            
                            self.commentsViewsView.alpha = 1.0
            })
        })
    }
    
    
    // MARK: - Actions
    @IBAction func backButtonTapped(_ sender: UIButton) {
        // Return comments count
        self.handlerPostShowSceneClose!(self.isPostContentModify)
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func moreButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
    
    @IBAction func shareButtonTapped(_ sender: UIButton) {
        if isNetworkAvailable {
            let urlString   =   "https://www.google.com/any-link-to-share"
            let shareText   =   "Hello, world!"
            
            if let image = try! UIImage(data: Data(contentsOf: URL(string: "https://www.google.co.in/logos/doodles/2017/mohammed-rafis-93th-birthday-5885879699636224.2-l.png")!)) {
                let activityVC  =   UIActivityViewController(activityItems: [shareText, urlString, image], applicationActivities: nil)
                present(activityVC, animated: true, completion: nil)
                
                if let popover = activityVC.popoverPresentationController {
                    popover.sourceView  =   self.view
                }
            }
        }
        
        else {
            self.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
        }
    }
    
    // Use for Active Vote & Flaunt buttons
    @IBAction func activeVoteButtonTapped(_ sender: UIButton) {
        // Check network connection
        guard isNetworkAvailable else {
            self.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
            return
        }

        guard self.isCurrentOperationPossible() else { return }

        let requestModel = PostShowModels.ActiveVote.RequestModel(isVote: sender.tag == 0, isFlaunt: nil, forPost: true)
        
        guard sender.tag == 0 else {
            self.showAlertView(withTitle: "Voting Verb", andMessage: "Cancel Vote Message", actionTitle: "ActionChange", needCancel: true, completion: { [weak self] success in
                if success {
                    self?.activeVoteButton.startVote(withSpinner: (self?.activeVoteActivityIndicator)!)
                    self?.interactor?.vote(withRequestModel: requestModel)
                } else {
                    self?.activeVoteButton.breakVote(withSpinner: (self?.activeVoteActivityIndicator)!)
                }
            })
            
            return
        }
        
        self.activeVoteButton.startVote(withSpinner: self.activeVoteActivityIndicator)
        self.interactor?.vote(withRequestModel: requestModel)
    }

    @IBAction func flauntButtonTapped(_ sender: UIButton) {
        // Check network connection
        guard isNetworkAvailable else {
            self.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
            return
        }
        
        guard self.isCurrentOperationPossible() else { return }
        
        // Flaunt
        if sender.tag == 0 {
            self.showAlertView(withTitle: "Voice Power Title", andMessage: "Voice Power Subtitle", attributedText: self.displayAlertView(byFlaunt: true), actionTitle: "Voice Power Title", needCancel: true, isCancelLeft: false, completion: { [weak self] success in
                guard success else { return }
                
                self?.runningRequest(isFlaunt: true)
            })
        }
        
        // Unflaunt (tag == 99)
        else {
            self.showAlertView(withTitle: "Voting Verb", andMessage: "Cancel Vote Message", attributedText: self.displayAlertView(byFlaunt: false), actionTitle: "ActionChange", needCancel: true, completion: { [weak self] success in
                guard success else { return }

                self?.runningRequest(isFlaunt: false)
            })
        }
    }
    
    @IBAction func usersButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func commentsButtonTapped(_ sender: UIButton) {
        // Check network connection
        guard isNetworkAvailable else {
            self.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
            return
        }
        
        guard self.isCurrentOperationPossible() else { return }

        self.router?.routeToPostCreateScene(withType: .createComment)
    }

    @IBAction func promoteButtonTapped(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#6ad381").cgColor

        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func donateButtonTapped(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#6ad381").cgColor

        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }
    
    @IBAction func buttonsTappedDown(_ sender: UIButton) {
        sender.layer.borderColor = UIColor(hexString: "#dbdbdb").cgColor
    }

    @IBAction func sortCommentsByButtonTapped(_ sender: UIButton) {
        self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
    }

    @IBAction func hideCommentsButtonTapped(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
       
        sender.setTitle("Hide Comments Verb".localized(), for: .normal)
        sender.setTitle("Show Comments Verb".localized(), for: .selected)
        
        self.commentsViewsView.alpha = sender.isSelected ? 0.0 : 1.0
        self.commentsViewsViewTopConstraint.constant = sender.isSelected ? -self.commentsViewsView.bounds.height : 0.0
        
        UIView.animate(withDuration: 1.2) {
            self.commentsViewsView.layoutIfNeeded()

            // Scrolling to bottom
            if !sender.isSelected && self.scrollCommentsDown {
                self.didContentViewScrollToCommentsView()
            }
        }
    }
    
    @IBAction func userProfileImageButtonTapped(_ sender: UIButton) {
        self.postFeedHeaderView.authorProfileButtonTapped(sender)
    }
   
    @IBAction func subscribeButtonTapped(_ sender: UIButton) {
        guard self.isCurrentOperationPossible() else { return }

        sender.setBorder(color: UIColor(hexString: "#dbdbdb").cgColor, cornerRadius: 4.0 * heightRatio)
        
        guard isNetworkAvailable else {
            self.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
            return
        }
        
        // Run spinner
        DispatchQueue.main.async {
            self.subscribeActivityIndicator.startAnimating()
        }
        
        // API
        let requestModel = PostShowModels.Item.RequestModel(willSubscribe: !sender.isSelected)
        interactor?.subscribe(withRequestModel: requestModel)
    }
    
    @IBAction func subscribeButtonTappedDown(_ sender: UIButton) {
        sender.setBorder(color: UIColor(hexString: "#e3e3e3").cgColor, cornerRadius: 4.0 * heightRatio)
    }
}


// MARK: - PostShowDisplayLogic
extension PostShowViewController: PostShowDisplayLogic {
    func displaySubscribe(fromViewModel viewModel: PostShowModels.Item.ViewModel) {
        self.subscribeActivityIndicator.stopAnimating()
        
        // NOTE: Display the result from the Presenter
        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // Set post author subscribe button title
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5, execute: {
            self.showAlertView(withTitle: "Info", andMessage: viewModel.isFollowing ? "Subscribe Success" : "Unsubscribe Success", needCancel: false, completion: { [weak self] _ in
                self?.subscribeButtonsCollection.first(where: { $0.tag == 1})?.isSelected = viewModel.isFollowing
                self?.subscribeButtonsCollection.first(where: { $0.tag == 1 })?.setTitle(viewModel.isFollowing ? "Unsubscribe".localized() : "Subscribe".localized(), for: .normal)
            })
        })
    }
    
    func displayLoadContent(fromViewModel viewModel: PostShowModels.Post.ViewModel) {
        // NOTE: Display the result from the Presenter
        Logger.log(message: "Success", event: .severe)

        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        self.fetchContent()
        
        // Load comments
        self.loadContentComments()
    }
    
    func displayLoadContentComments(fromViewModel viewModel: PostShowModels.Post.ViewModel) {
        // NOTE: Display the result from the Presenter
        Logger.log(message: "Success", event: .severe)

        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        self.fetchComments()
    }
    
    func displayCheckFollowing(fromViewModel viewModel: PostShowModels.Following.ViewModel) {
        // NOTE: Display the result from the Presenter
        Logger.log(message: "Success", event: .severe)

        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // Set post author subscribe button title
        DispatchQueue.main.async {
            self.subscribeButtonsCollection.first(where: { $0.tag == 1})?.isSelected = viewModel.isFollowing
            self.subscribeButtonsCollection.first(where: { $0.tag == 1 })?.setTitle(viewModel.isFollowing ? "Unsubscribe".localized() : "Subscribe".localized(), for: .normal)
        }
    }
    
    func displayVote(fromViewModel viewModel: PostShowModels.ActiveVote.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.errorAPI == nil else {
            if let message = viewModel.errorAPI?.caseInfo.message {
                self.showAlertView(withTitle:   viewModel.errorAPI!.caseInfo.title,
                                   andMessage:  message.translate(),
                                   needCancel:  false,
                                   completion:  { _ in
                                    if viewModel.forPost {
                                        self.scrollCommentsDown = false
                                        self.fetchContent()
                                    } else if let commentShortInfo = self.router?.dataStore?.comment, let indexPath = commentShortInfo.indexPath,
                                        let commentEntity = CoreDataManager.instance.readEntity(withName: "Comment",
                                                                                                andPredicateParameters: NSPredicate(format: "author == %@ AND permlink == %@", commentShortInfo.author!, commentShortInfo.permlink!)) as? Comment {
                                        self.commentsViews[indexPath.row].setup(withComment: commentEntity)
                                    }
                })
            }
            
            return
        }
        
        // Reload & refresh content by indexPath
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1) {
            let postType = viewModel.forPost ? self.router!.dataStore!.postType : PostsFeedType.comment
            self.isPostContentModify = true
            
            if let postShortInfo = viewModel.forPost ? self.router?.dataStore?.postShortInfo : self.router?.dataStore?.comment, let indexPath = postShortInfo.indexPath {
                RestAPIManager.loadModifiedPost(author: postShortInfo.author ?? "XXX", permlink: postShortInfo.permlink ?? "XXX", postType: postType!, completion: { model in
                    // PostShow
                    if viewModel.forPost {
                        self.scrollCommentsDown = false
                        self.fetchContent()
                    }
                    
                    // CommentView
                    else if let commentEntity = model as? Comment {
                        // Modify Comment
                        self.commentsViews[indexPath.row].setup(withComment: commentEntity)
                    }
                })
            }
        }
    }
}


// MARK: - Load data from Blockchain by API
extension PostShowViewController {
    func loadContent() {
        // Load Post
        let loadPostContentQueue = DispatchQueue.global(qos: .background)
        
        loadPostContentQueue.sync {
            let contentRequestModel = PostShowModels.Post.RequestModel()
            self.interactor?.loadContent(withRequestModel: contentRequestModel)

            self.runCheckFollowing()
        }
    }
    
    func loadContentComments() {
        Logger.log(message: "Success", event: .severe)

        // Remove subviews in Buttons Stack view
        self.commentsViews.forEach({ $0.removeFromSuperview() })
        self.commentsViews.removeAll()
        self.commentsViewsViewHeightConstraint.constant = 0.0
        self.commentsCount = 0
        
        let loadPostContentCommentsQueue = DispatchQueue.global(qos: .utility)

        loadPostContentCommentsQueue.async {
            let contentRepliesRequestModel = PostShowModels.Post.RequestModel()
            self.interactor?.loadContentComments(withRequestModel: contentRepliesRequestModel)
        }
    }
    
    private func runCheckFollowing() {
        Logger.log(message: "Success", event: .severe)

        guard isNetworkAvailable && !User.isAnonymous else {
            DispatchQueue.main.async {
                self.subscribeButtonsCollection.first(where: { $0.tag == 1 })?.isSelected = false
                self.subscribeButtonsCollection.first(where: { $0.tag == 1 })?.setTitle("Subscribe".localized(), for: .normal)
            }
            
            return
        }
        
        // API
        let requestModel = PostShowModels.Following.RequestModel()
        self.interactor?.checkFollowing(withRequestModel: requestModel)
    }
    
    private func runningRequest(isFlaunt: Bool) {
        let requestModel = PostShowModels.ActiveVote.RequestModel(isVote: nil, isFlaunt: isFlaunt, forPost: true)
        
        self.flauntButton.startVote(withSpinner: self.flauntActivityIndicator)
        self.interactor?.vote(withRequestModel: requestModel)
    }
}


// MARK: - Fetch data from CoreData
extension PostShowViewController {
    // User Profile
    private func fetchContent() {
        let postType        =   self.router!.dataStore!.postType!
        let fetchRequest    =   NSFetchRequest<NSFetchRequestResult>(entityName: postType.caseTitle())
        
        if let userName = self.router?.dataStore?.postShortInfo?.author, let permlink = self.router?.dataStore?.postShortInfo?.permlink {
            fetchRequest.predicate = NSPredicate(format: "author == %@ AND permlink == %@", userName, permlink)
        }
        
        do {
            if let displayedPost = try CoreDataManager.instance.managedObjectContext.fetch(fetchRequest).first as? PostCellSupport {
                self.postFeedHeaderView.display(post: displayedPost)               
                self.loadViewSettings()
            }
        }
        
        catch {
            self.showAlertView(withTitle: "Error", andMessage: "Fetching Failed", needCancel: false, completion: { _ in
                Logger.log(message: "Fetching Failed", event: .error)
            })
        }
    }
    
    // Build Post Comments views tree
    private func setViewTreeIndex(byComment comment: Comment) {
        let commentChildrens = self.commentsSecondLevel.filter({ $0 != comment }).filter({ $0.parentPermlink!.contains(comment.permlink) })

        guard commentChildrens.count > 0 else {
            return
        }
        
        for (index, commentChildren) in commentChildrens.enumerated() {
            commentChildren.treeIndex = comment.treeIndex + "\(index)"
            self.setViewTreeIndex(byComment: commentChildren)
        }
    }
    
    private func fetchComments() {
        if let postShortInfo = self.router?.dataStore?.postShortInfo {
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1, execute: {
                // Remove subviews in Stack view
                self.commentsViews.forEach({ $0.removeFromSuperview() })
                self.commentsViews.removeAll()
                
                guard let comments = CoreDataManager.instance.readEntities(withName:                    "Comment",
                                                                           withPredicateParameters:     NSPredicate(format: "url contains[cd] %@ AND url contains[cd] %@", postShortInfo.author ?? "XXX", postShortInfo.permlink ?? "XXX"),
                                                                           andSortDescriptor:           NSSortDescriptor(key: "created", ascending: true)) as? [Comment], comments.count > 0 else {
                                                                            self.didCommentsControlView(hided: true)
                                                                            return
                }

                self.commentsViewsViewHeightConstraint.constant = 0.0
                
                // Set CommentView's levels
                let commentsFirstLevel: [Comment] = comments.filter({ $0.parentPermlink == postShortInfo.permlink }).sorted(by: { $0.created < $1.created })
                commentsFirstLevel.forEach({ $0.treeLevel = 0 })

                self.commentsSecondLevel = comments.filter({ $0.parentPermlink != postShortInfo.permlink }).sorted(by: { $0.created < $1.created })
                self.commentsSecondLevel.forEach({ $0.treeLevel = 1 })
                
                for (index, comment) in commentsFirstLevel.enumerated() {
                    comment.treeIndex = "\(index)"
                    self.setViewTreeIndex(byComment: comment)
                }
                
                // Build comments view tree
                for (index, comment) in comments.sorted(by: { $0.treeIndex < $1.treeIndex }).enumerated() {
                    Logger.log(message: "treeIndex = \(comment.treeIndex), author = \(comment.author), body = \(comment.body)", event: .debug)

                    comment.treeIndex = "\(index)"
                    let commentView = CommentView.init(withComment: comment)
                    self.commentsViews.append(commentView)
                }
                
                // Load comment body content
                for commentView in self.commentsViews {
                    commentView.loadData(fromBody: comments.sorted(by: { $0.treeIndex < $1.treeIndex })[commentView.postShortInfo.indexPath!.row].body, completion: { [weak self] viewHeight in
                        commentView.frame = CGRect(origin: .zero, size: commentView.frame.size)
                        self?.commentsViewsViewHeightConstraint.constant += viewHeight
                        self?.view.layoutIfNeeded()
                        
                        self?.commentsCount += 1
                        
                        if (self?.commentsCount)! == comments.count {
                            // Show comments count
                            self?.commentsViews.sort(by: { $0.tag < $1.tag })
                            
                            var height: CGFloat = 0.0
                            
                            self?.commentsViews.forEach({
                                if $0.tag == 0 {
                                    height = $0.frame.height
                                } else {
                                    let nextCommentViewOrigin = CGPoint(x: 0.0, y: height)
                                    $0.frame.origin = nextCommentViewOrigin
                                    height += $0.frame.height
                                }
                                
                                self?.commentsViewsView.addSubview($0)
                            })
                            
                            self?.didCommentsControlView(hided: false)
                        }
                    })
                }
            })
        }
    }
    
    private func load(body: String, forCommentView commentView: CommentView, completionLoadBody: @escaping () -> Void) {
        commentView.loadData(fromBody: body, completion: { [weak self] viewHeight in
            let nextCommentViewOrigin = CGPoint(x: 0.0, y: self?.commentsViewsViewHeightConstraint.constant ?? 0)

            commentView.frame = CGRect(origin: nextCommentViewOrigin, size: commentView.frame.size)

            self?.commentsViewsViewHeightConstraint.constant += viewHeight
            self?.view.layoutIfNeeded()
            
            completionLoadBody()
        })
    }
}


// MARK: - UICollectionViewDataSource
extension PostShowViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        // Return the number of items
        guard let displayedPost = self.router?.dataStore?.displayedPost, let dataSource = displayedPost.tags, dataSource.count > 0 else {
            return 0
        }
        
        return dataSource.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PostShowTagCollectionViewCell", for: indexPath) as! PostShowTagCollectionViewCell
        let tag = self.router!.dataStore!.displayedPost!.tags![indexPath.row]
        
        // Config tag cell
        cell.setup(withItem: tag, andIndexPath: indexPath)
        
        // Handlers
        cell.completionButtonTapped     =   {
            self.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
        }
        
        return cell
    }
}


// MARK: - UICollectionViewDelegate
extension PostShowViewController {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {}
}


// MARK: - UICollectionViewDelegateFlowLayout
extension PostShowViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets.init(top: 0.0, left: 0.0, bottom: 0.0, right: 12.0)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 6.0 * widthRatio
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 6.0 * heightRatio
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let tag     =   self.router!.dataStore!.displayedPost!.tags![indexPath.row]
        let width   =   (CGFloat(tag.count) * 7.0 + 30.0) * widthRatio
        
        return CGSize.init(width: width, height: 30.0 * heightRatio)
    }
}


// MARK: - UIScrollViewDelegate
extension PostShowViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        Logger.log(message: "contentOffset = \(scrollView.contentOffset.y)", event: .debug)
    }
}


// MARK: - UIAlertController
extension PostShowViewController {
    func displayAlertView(byFlaunt isFlaunt: Bool) -> NSMutableAttributedString {
        let fullAttributedString = NSMutableAttributedString()

        if isFlaunt {
            let text1       =   "Voice Power Label 2".localized()
            let text2       =   "Voice Power Label 3".localized()
            let text3       =   "Voice Power Label 4".localized()
            let subtitle    =   "Voice Power Subtitle".localized()
            
            let strings     =   [subtitle, text1, text2, text3]
            
            // Set Subtitle
            for (index, string) in strings.enumerated() {
                let bulletPoint         =   "\u{2022}"
                let formattedString     =   index == 0 ? "\n\(string)\n" : "\(bulletPoint) \(string)\n"
                let attributedString    =   NSMutableAttributedString(string: formattedString)
              
                var paragraphStyle: NSMutableParagraphStyle
                
                paragraphStyle          =   NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle
                paragraphStyle.tabStops =   [NSTextTab(textAlignment: .left, location: 20, options: [NSTextTab.OptionKey: Any]())]
                
                paragraphStyle.headIndent           =   index == 0 ? 5 : 15
                paragraphStyle.lineSpacing          =   1.4
                paragraphStyle.defaultTabInterval   =   20
                paragraphStyle.firstLineHeadIndent  =   5
                
                attributedString.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: attributedString.length))
                attributedString.addAttribute(.foregroundColor, value: UIColor.black, range: NSRange(location: 0, length: attributedString.length))
                attributedString.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 14.0)!, range: NSRange(location: 0, length: attributedString.length))
                
                fullAttributedString.append(attributedString)
            }
        }
        
        else {
            let subtitle    =   "Cancel Vote Message".localized()

            
            // Set Subtitle
            let formattedString     =   "\n\(subtitle)\n"
            let attributedString    =   NSMutableAttributedString(string: formattedString)
            
            var paragraphStyle: NSMutableParagraphStyle
            
            paragraphStyle          =   NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle
            paragraphStyle.tabStops =   [NSTextTab(textAlignment: .left, location: 20, options: [NSTextTab.OptionKey: Any]())]
            
            paragraphStyle.headIndent           =   5
            paragraphStyle.lineSpacing          =   1.4
            paragraphStyle.defaultTabInterval   =   20
            paragraphStyle.firstLineHeadIndent  =   5
            
            attributedString.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: attributedString.length))
            attributedString.addAttribute(.foregroundColor, value: UIColor.black, range: NSRange(location: 0, length: attributedString.length))
            attributedString.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 14.0)!, range: NSRange(location: 0, length: attributedString.length))
            
            fullAttributedString.append(attributedString)
        }
        
        return fullAttributedString
    }
}
