//
//  UsersVoteShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 10/25/18.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
protocol UsersVoteShowDisplayLogic: class {
    func displaySubscribe(fromViewModel viewModel: UsersVoteShowModels.Sub.ViewModel)
    func displayLoadUserVoted(fromViewModel viewModel: UsersVoteShowModels.Item.ViewModel)
}

class UsersVoteShowViewController: GSBaseViewController {
    // MARK: - Properties
    var usersVoted: [User] = [User]()

    var interactor: UsersVoteShowBusinessLogic?
    var router: (NSObjectProtocol & UsersVoteShowRoutingLogic & UsersVoteShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            self.tableView.delegate     =   self
            self.tableView.dataSource   =   self
            
            self.tableView.tune()
            self.tableView.register(UINib(nibName: "UserVoteTableViewCell", bundle: nil), forCellReuseIdentifier: "UserVoteTableViewCell")
       }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   UsersVoteShowInteractor()
        let presenter               =   UsersVoteShowPresenter()
        let router                  =   UsersVoteShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // API
        self.loadUsersVoted()
//        self.loadViewSettings()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.showNavigationBar()
        UIApplication.shared.statusBarStyle = .default

        self.localizeTitles()
    }
    
    // MARK: - Custom Functions
    private func loadViewSettings() {

    }
    
    override func localizeTitles() {
        if let dataStore = self.router?.dataStore {
            self.title = (dataStore.usersVoteMode == .like ? "Voted Verb" : "Voted Against Verb").localized()
        }
    }
}


// MARK: - UsersVoteShowDisplayLogic
extension UsersVoteShowViewController: UsersVoteShowDisplayLogic {
    func displaySubscribe(fromViewModel viewModel: UsersVoteShowModels.Sub.ViewModel) {
//        self.subscribeActivityIndicator.stopAnimating()
//        
//        // NOTE: Display the result from the Presenter
//        if let error = viewModel.errorAPI {
//            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
//        }
//        
//        // Set post author subscribe button title
//        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5, execute: {
//            self.showAlertView(withTitle: "Info", andMessage: viewModel.isFollowing ? "Subscribe Success" : "Unsubscribe Success", needCancel: false, completion: { [weak self] _ in
//                self?.subscribeButtonsCollection.first(where: { $0.tag == 1})?.isSelected = viewModel.isFollowing
//                self?.subscribeButtonsCollection.first(where: { $0.tag == 1 })?.setTitle(viewModel.isFollowing ? "Subscriptions".localized() : "Subscribe Verb".localized(), for: .normal)
//            })
//        })
    }

    func displayLoadUserVoted(fromViewModel viewModel: UsersVoteShowModels.Item.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}


// MARK: - Load data from Blockchain by API
extension UsersVoteShowViewController {
    func loadUsersVoted() {
        // Load Post
        let loadUsersVotedQueue = DispatchQueue.global(qos: .background)
        
        loadUsersVotedQueue.sync {
            let usersVotedRequestModel = UsersVoteShowModels.Item.RequestModel()
            self.interactor?.loadUsersVoted(withRequestModel: usersVotedRequestModel)
        }
    }
}


// MARK: - UITableViewDataSource
extension UsersVoteShowViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 10
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "UserVoteTableViewCell") as! UserVoteTableViewCell
        
        cell.display(user: User.current!)
        
        // Handlers
        cell.handlerSubscribeButtonTapped           =   { [weak self] isSubscribe in
            
        }
        
        return cell
    }
}


// MARK: - UITableViewDelegate
extension UsersVoteShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 64.0
    }
}
