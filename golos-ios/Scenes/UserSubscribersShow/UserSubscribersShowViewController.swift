//
//  UserSubscribersShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 10/29/18.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift
import SkeletonView

// MARK: - Input & Output protocols
protocol UserSubscribersShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: UserSubscribersShowModels.Something.ViewModel)
}

class UserSubscribersShowViewController: GSBaseViewController {
    // MARK: - Properties
    var interactor: UserSubscribersShowBusinessLogic?
    var router: (NSObjectProtocol & UserSubscribersShowRoutingLogic & UserSubscribersShowDataPassing)?
    
    
    // MARK: - IBOutlets
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   UserSubscribersShowInteractor()
        let presenter               =   UserSubscribersShowPresenter()
        let router                  =   UserSubscribersShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // SkeletonView
        self.view.showSkeleton(usingColor: UIColor.clouds)
        
        // API
//        self.loadActiveVoters()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.localizeTitles()
        self.showNavigationBar()
        
        // Set StatusBarStyle
        selectedTabBarItem          =   self.navigationController!.tabBarItem.tag
        self.isStatusBarStyleLight  =   false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
//        if let votersWorkItem = self.loadVotersWorkItem, !votersWorkItem.isCancelled {
//            votersWorkItem.cancel()
//        }
    }

    
    // MARK: - Custom Functions
    override func localizeTitles() {
        if let dataStore = self.router?.dataStore {
            self.title = (dataStore.userSubscribeMode == .subscribes ? "Subscribers" : "Subscriptions").localized()
        }
    }
}


// MARK: - UserSubscribersShowDisplayLogic
extension UserSubscribersShowViewController: UserSubscribersShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: UserSubscribersShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}
