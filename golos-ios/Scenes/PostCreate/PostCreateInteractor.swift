//
//  PostCreateInteractor.swift
//  golos-ios
//
//  Created by msm72 on 11.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Business Logic protocols
protocol PostCreateBusinessLogic {
    func save(tags: [Tag])
    func save(commentBody: String)
    func save(commentTitle: String)
    func postCreate(withRequestModel requestModel: PostCreateModels.Something.RequestModel)
    func postComment(withRequestModel requestModel: PostCreateModels.Something.RequestModel)
    func postCommentReply(withRequestModel requestModel: PostCreateModels.Something.RequestModel)
}

protocol PostCreateDataStore {
    var tags: [Tag]? { get set }
    var commentBody: String? { get set }
    var commentTitle: String? { get set }
}

class PostCreateInteractor: PostCreateBusinessLogic, PostCreateDataStore {
    // MARK: - Properties
    var presenter: PostCreatePresentationLogic?
    
    // PostCreateDataStore protocol implementation
    var tags: [Tag]?
    var commentBody: String?
    var commentTitle: String?

    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func save(tags: [Tag]) {
        self.tags = tags
    }
    
    func save(commentBody: String) {
        self.commentBody = commentBody
    }
    
    func save(commentTitle: String) {
        self.commentTitle = commentTitle
    }
    
    func postCreate(withRequestModel requestModel: PostCreateModels.Something.RequestModel) {
        let stringTags: [String]  =   self.tags!.compactMap({ $0.title })

        let comment =   RequestParameterAPI.Comment(parentAuthor:       "",
                                                    parentPermlink:     self.tags!.first!.title,
                                                    author:             "msm72",
                                                    title:              self.commentTitle!,
                                                    body:               self.commentBody!,
                                                    jsonMetadata: [RequestParameterAPI.CommentMetadata(tags: stringTags)])
        
//        let commentOptions  =   RequestParameterAPI.CommentOptions(author: <#T##String#>,
//                                                                   permlink: <#T##String#>,
//                                                                   maxAcceptedPayout: <#T##String#>,
//                                                                   percentSteemDollars: <#T##UInt#>,
//                                                                   allowVotes: <#T##Bool#>,
//                                                                   allowCurationRewards: <#T##Bool#>,
//                                                                   extensions: <#T##[String]#>)
        
        // API 'Create new post'
        broadcast.executePOST(byOperationAPIType: OperationAPIType.create(post: comment),
                              onResult: { [weak self] responseAPIResult in
                                guard let result = (responseAPIResult as! ResponseAPIFeedResult).result, result.count > 0 else {
//                                    completion([], nil)
                                    return
                                }

                                let responseModel = PostCreateModels.Something.ResponseModel()
                                self?.presenter?.presentPostCreate(fromResponseModel: responseModel)
        },
                              onError: { errorAPI in
                                Logger.log(message: "nresponse API Error = \(errorAPI.caseInfo.message)\n", event: .error)
//                                completion(nil, errorAPI)
        })
    }
    
    func postComment(withRequestModel requestModel: PostCreateModels.Something.RequestModel) {
        let responseModel = PostCreateModels.Something.ResponseModel()
        presenter?.presentPostComment(fromResponseModel: responseModel)
    }
    
    func postCommentReply(withRequestModel requestModel: PostCreateModels.Something.RequestModel) {
        let responseModel = PostCreateModels.Something.ResponseModel()
        presenter?.presentPostCommentReply(fromResponseModel: responseModel)
    }
}
