//
//  PostCreateInteractor.swift
//  golos-ios
//
//  Created by msm72 on 11.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Business Logic protocols
protocol PostCreateBusinessLogic {
    func save(tags: [Tag]?)
    func save(commentBody: String?)
    func save(commentTitle: String?)
    func postCreate(withRequestModel requestModel: PostCreateModels.Post.RequestModel)
    func postComment(withRequestModel requestModel: PostCreateModels.Post.RequestModel)
    func postCommentReply(withRequestModel requestModel: PostCreateModels.Post.RequestModel)
}

protocol PostCreateDataStore {
    var tags: [Tag]? { get set }
    var commentBody: String? { get set }
    var commentTitle: String? { get set }
}

class PostCreateInteractor: PostCreateBusinessLogic, PostCreateDataStore {
    // MARK: - Properties
    var presenter: PostCreatePresentationLogic?
    
    // PostCreateDataStore protocol implementation
    var tags: [Tag]?
    var commentBody: String?
    var commentTitle: String?

    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func save(tags: [Tag]?) {
        self.tags = tags
    }
    
    func save(commentBody: String?) {
        self.commentBody = commentBody
    }
    
    func save(commentTitle: String?) {
        self.commentTitle = commentTitle
    }
    
    func postCreate(withRequestModel requestModel: PostCreateModels.Post.RequestModel) {
        // API 'get_content'
        let content                     =   RequestParameterAPI.Content(author: User.current!.name, permlink: self.tags!.first!.title!)
        
        RestAPIManager.loadPostPermlink(byContent: content, completion: { errorAPI in
            guard errorAPI.caseInfo.message != "No Internet Connection" || !errorAPI.caseInfo.message.hasSuffix("timing") else {
                let responseModel       =   PostCreateModels.Post.ResponseModel(errorAPI: errorAPI)
                self.presenter?.presentPostCreate(fromResponseModel: responseModel)
                return
            }
            
            // API 'Create new post'
            let jsonMetadataString      =   ("{\"tags\":[\"" + self.tags!.compactMap({ $0.title!.transliterationInLatin() }).joined(separator: ",") + "\"]")
                                                .replacingOccurrences(of: ",", with: "\",\"") + ",\"app\":\"golos.io/0.1\",\"format\":\"markdown\"}"
            Logger.log(message: "\njsonMetadataString:\n\t\(jsonMetadataString)", event: .debug)
            
            let comment                 =   RequestParameterAPI.Comment(parentAuthor:       "",
                                                                        parentPermlink:     self.tags!.first!.title!,
                                                                        author:             User.current!.name,
                                                                        title:              self.commentTitle!,
                                                                        body:               self.commentBody!,
                                                                        jsonMetadata:       jsonMetadataString,
                                                                        needTiming:         errorAPI.caseInfo.message == "Permlink with timing")
            
            let operationAPIType        =   OperationAPIType.createPost(operations: [comment])
            
            broadcast.executePOST(requestByOperationAPIType:    operationAPIType,
                                  userName:                     User.current!.name,
                                  onResult:                     { [weak self] responseAPIResult in
                                    var errorAPI: ErrorAPI?
                                    
                                    if let error = (responseAPIResult as! ResponseAPIBlockchainPostResult).error {
                                        errorAPI        =   ErrorAPI.requestFailed(message: error.message)
                                    }
                                    
                                    let responseModel   =   PostCreateModels.Post.ResponseModel(errorAPI: errorAPI)
                                    self?.presenter?.presentPostCreate(fromResponseModel: responseModel)
                },
                                  onError: { errorAPI in
                                    Logger.log(message: "nresponse API Error = \(errorAPI.caseInfo.message)\n", event: .error)
                                    let responseModel   =   PostCreateModels.Post.ResponseModel(errorAPI: errorAPI)
                                    self.presenter?.presentPostCreate(fromResponseModel: responseModel)
            })
        })
    }
    
    func postComment(withRequestModel requestModel: PostCreateModels.Post.RequestModel) {
        let responseModel = PostCreateModels.Post.ResponseModel(errorAPI: nil)
        presenter?.presentPostComment(fromResponseModel: responseModel)
    }
    
    func postCommentReply(withRequestModel requestModel: PostCreateModels.Post.RequestModel) {
        let responseModel = PostCreateModels.Post.ResponseModel(errorAPI: nil)
        presenter?.presentPostCommentReply(fromResponseModel: responseModel)
    }
}
