//
//  PostCreateViewController.swift
//  golos-ios
//
//  Created by msm72 on 11.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift
import IQKeyboardManagerSwift

// MARK: - Input & Output protocols
protocol PostCreateDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: PostCreateModels.Something.ViewModel)
}

class PostCreateViewController: UIViewController {
    // MARK: - Properties
    var interactor: PostCreateBusinessLogic?
    var router: (NSObjectProtocol & PostCreateRoutingLogic & PostCreateDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var toolbarView: UIView! {
        didSet {
            toolbarView.layer.shadowColor       =   UIColor.gray.cgColor
            toolbarView.layer.shadowOpacity     =   4
            toolbarView.layer.shadowOffset      =   CGSize(width: 0.0, height: -2.0)
            toolbarView.layer.shadowRadius      =   4
            
            toolbarView.layer.shadowPath        =   UIBezierPath(rect: toolbarView.bounds).cgPath
            toolbarView.layer.shouldRasterize   =   true
        }
    }
    
    @IBOutlet weak var toolbarViewBottomConstraint: NSLayoutConstraint!
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PostCreateInteractor()
        let presenter               =   PostCreatePresenter()
        let router                  =   PostCreateRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.tune()
        self.navigationItem.title = "Publish Title".localized()
        
//        self.loadViewSettings()
        self.moveToolbarView(up: false)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.navigationController?.add(shadow: true)
    }
    
    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        let requestModel = PostCreateModels.Something.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    private func moveToolbarView(up: Bool) {
        self.toolbarViewBottomConstraint.constant = up ? 260.0 : 0.0
        
        UIView.animate(withDuration: 0.5) {
            self.view.layoutIfNeeded()
        }
    }
    
    
    // MARK: - Actions
    @IBAction func cancelBarButtonTapped(_ sender: UIBarButtonItem) {
        let fromView: UIView    =   self.view
        let toView: UIView      =   (self.navigationController!.tabBarController?.viewControllers?.first!.view)!
        
        UIView.animate(withDuration: 0.3,
                       animations: {
                        self.navigationController?.navigationBar.barTintColor = UIColor(hexString: "#4469af")
        }, completion: { _ in
            UIView.transition(from: fromView, to: toView, duration: 0.5, options: .transitionCrossDissolve) { [weak self] _ in
                self?.navigationController?.tabBarController?.selectedIndex = 0
            }
        })
    }
    
    @IBAction func publishBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func boldBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func italicBarButtonTapped(_ sender: UIBarButtonItem) {
    }
 
    @IBAction func underlineBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func leftAlignBarButtonTapped(_ sender: UIBarButtonItem) {
    }

    @IBAction func centerAlignBarButtonTapped(_ sender: UIBarButtonItem) {
    }
  
    @IBAction func rightAlignBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func emailBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func linkBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func imageBarButtonTapped(_ sender: UIBarButtonItem) {
    }
    
    @IBAction func happyBarButtonTapped(_ sender: UIBarButtonItem) {
    }
}


// MARK: - PostCreateDisplayLogic
extension PostCreateViewController: PostCreateDisplayLogic {
    func displaySomething(fromViewModel viewModel: PostCreateModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}
