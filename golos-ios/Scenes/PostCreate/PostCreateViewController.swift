//
//  PostCreateViewController.swift
//  golos-ios
//
//  Created by msm72 on 11.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift
import IQKeyboardManagerSwift

enum SceneType: Int {
    case create = 0
    case comment
    case reply
}

// MARK: - Input & Output protocols
protocol PostCreateDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: PostCreateModels.Something.ViewModel)
}

class PostCreateViewController: UIViewController {
    // MARK: - Properties
    var sceneType: SceneType = .create {
        didSet {
            stackViewTopConstraint.constant = (sceneType == .comment) ? -70.0 * widthRatio : 0.0
            
            _ = sceneViewsCollection.map({ $0.isHidden = ($0.tag == sceneType.rawValue) ? false : true })
        }
    }
    
    var interactor: PostCreateBusinessLogic?
    var router: (NSObjectProtocol & PostCreateRoutingLogic & PostCreateDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var tagsTitleLabel: UILabel! {
        didSet {
            tagsTitleLabel.tune(withText:           "Add Max 5 Tags",
                                hexColors:          darkGrayWhiteColorPickers,
                                font:               UIFont(name: "SFUIDisplay-Regular", size: 13.0 * widthRatio),
                                alignment:          .left,
                                isMultiLines:       false)
        }
    }
    
    @IBOutlet weak var contentTextView: UITextView! {
        didSet {
            contentTextView.delegate = self
        }
    }
    
    
    @IBOutlet var sceneViewsCollection: [UIView]!
    
    @IBOutlet weak var stackViewTopConstraint: NSLayoutConstraint!
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   PostCreateInteractor()
        let presenter               =   PostCreatePresenter()
        let router                  =   PostCreateRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.tune()
        self.navigationItem.title = "Publish Title".localized()
        
        sceneType = .create
        
        IQKeyboardManager.sharedManager().enable = false

//        self.loadViewSettings()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.navigationController?.add(shadow: true, withBarTintColor: .white)
        self.navigationController?.hidesBarsOnTap = false
    }
    
    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        let requestModel = PostCreateModels.Something.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    
    // MARK: - Actions
    @IBAction func cancelBarButtonTapped(_ sender: UIBarButtonItem) {
        let fromView: UIView    =   self.view
        let toView: UIView      =   (self.navigationController!.tabBarController?.viewControllers?.first!.view)!
        
        UIView.animate(withDuration: 0.3,
                       animations: {
                        self.navigationController?.navigationBar.barTintColor = UIColor(hexString: "#4469af")
                        self.navigationController?.navigationBar.isHidden = true
        }, completion: { _ in
            UIView.transition(from: fromView, to: toView, duration: 0.5, options: .transitionCrossDissolve) { [weak self] _ in
                self?.navigationController?.tabBarController?.selectedIndex = 0
            }
        })
    }
    
    @IBAction func publishBarButtonTapped(_ sender: UIBarButtonItem) {
    }
}


// MARK: - PostCreateDisplayLogic
extension PostCreateViewController: PostCreateDisplayLogic {
    func displaySomething(fromViewModel viewModel: PostCreateModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}


// MARK: -
extension PostCreateViewController: UITextViewDelegate {
    func textViewDidBeginEditing(_ textView: UITextView) {
        self.contentTextView.showToolbar { [weak self] tag in
            switch tag {
            // Add link
            case 7:
                let linkAlert = UIAlertController(title: "Add Link Title".localized(), message: nil, preferredStyle: .alert)

                // Text
                linkAlert.addTextField { (textField) in
                    textField.placeholder = "Enter your text".localized()
                    textField.borderStyle = .none
                }

                // Link
                linkAlert.addTextField { (textField) in
                    textField.placeholder = "Enter your link".localized()
                    textField.borderStyle = .none
                }

                let actionOk = UIAlertAction(title: "ActionOk".localized(), style: .default) { [unowned linkAlert] _ in
                    guard let linkName = linkAlert.textFields![0].text, !linkName.isEmpty else {
                        return
                    }
                    
                    guard let linkAddress = linkAlert.textFields![1].text, !linkAddress.isEmpty else {
                        return
                    }
                    
                    let linkAttributes: [NSAttributedStringKey: Any] =  [
                                                                            .link:              NSURL(string: linkAddress)!,
                                                                            .foregroundColor:   UIColor.blue
                                                                        ]
                    
                    let attributedString = NSMutableAttributedString(string: linkName)
                    attributedString.setAttributes(linkAttributes, range: NSRange(location: 0, length: linkName.count))
                    
                    self?.contentTextView.attributedText = attributedString
                }
                
                linkAlert.addAction(actionOk)
                self?.present(linkAlert, animated: true)
                
            // Add image
            case 8:
                print("Add image")
                
            default:
                break
            }
        }
    }
}
