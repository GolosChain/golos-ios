//
//  LogInShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 10.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

enum AnimationDirection {
    case fromLeftToRight
    case fromRightToLeft
}

enum LoginType {
    case postingKey
    case activeKey
}

// MARK: - Input & Output protocols
protocol LogInShowDisplayLogic: class {
    func displayAuthorizeUser(fromViewModel viewModel: LogInShowModels.Parameters.ViewModel)
}

// MARK: - Input & Output protocols
class LogInShowViewController: BaseViewController {
    // MARK: - Properties
    var textFieldsCollection: [UITextField]?
    var animationDirection: AnimationDirection?

    var interactor: LogInShowBusinessLogic?
    var router: (NSObjectProtocol & LogInShowRoutingLogic)?

    // Container childVC
    var activeKeyShowVC: ActiveKeyShowViewController?
    var postingKeyShowVC: PostingKeyShowViewController?
    
    var activeViewController: BaseViewController? {
        didSet {
            guard oldValue != nil else {
                self.router?.updateActiveViewController()
                return
            }
            
            animationDirection = ((oldValue?.view.tag)! < (activeViewController?.view.tag)!) ? .fromRightToLeft : .fromLeftToRight
            self.router?.remove(inactiveViewController: oldValue)
        }
    }
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var containerView: UIView!

    @IBOutlet weak var contentView: UIView! {
        didSet {
            contentView.tune()
        }
    }
    
    @IBOutlet weak var changeKeyTypeButton: UIButton! {
        didSet {
            changeKeyTypeButton.theme_setTitleColor(veryDarkGrayWhiteColorPickers, forState: .normal)
            changeKeyTypeButton.titleLabel?.font = UIFont(name: "SFUIDisplay-Regular", size: 14.0 * widthRatio)
        }
    }

    @IBOutlet weak var notRegisteredLabel: UILabel! {
        didSet {
            notRegisteredLabel.tune(withText:           notRegisteredLabel.text ?? "Zorro",
                                    hexColors:          darkGrayWhiteColorPickers,
                                    font:               UIFont(name: "SFUIDisplay-Regular", size: 16.0 * widthRatio),
                                    alignment:          .center,
                                    isMultiLines:       false)
        }
    }

    @IBOutlet weak var registrationButton: UIButton! {
        didSet {
            registrationButton.setTitle("Registration".localized(), for: .normal)
            registrationButton.theme_setTitleColor(vividBlueWhiteColorPickers, forState: .normal)
            registrationButton.titleLabel?.font = UIFont(name: "SFProDisplay-Regular", size: 16.0 * widthRatio)
        }
    }

    @IBOutlet weak var enterButtonSpinnerTrailingConstraint: NSLayoutConstraint! {
        didSet {
            enterButtonSpinnerTrailingConstraint.constant *= widthRatio
        }
    }
    
    @IBOutlet weak var enterButtonSpinner: UIActivityIndicatorView!
    @IBOutlet weak var enterButton: UIButton!
    @IBOutlet weak var cancelButton: UIButton!

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   LogInShowInteractor()
        let presenter               =   LogInShowPresenter()
        let router                  =   LogInShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        Logger.log(message: "Success", event: .severe)
        
        // Tune buttons
        enterButton.setTitle("Enter Title".localized(), for: .normal)
        enterButton.setBlueButtonRoundEdges()
        
        cancelButton.setTitle("Cancel Title".localized(), for: .normal)
        cancelButton.setBorderButtonRoundEdges()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.tune()
        configureBackButton()
        self.router?.routeToPostingKeyScene()
    }
    
    
    // MARK: - Custom Functions
    private func isRequestAvailable() -> Bool {
        guard let collection = self.textFieldsCollection, collection.count > 0  else {
            self.showAlertView(withTitle: "Error", andMessage: "Login Hint", needCancel: false, completion: { _ in })
            return false
        }
        
        let emptyTextField = self.textFieldsCollection?.first(where: { ($0.text?.isEmpty)! })
        
        guard emptyTextField == nil else {
            self.showAlertView(withTitle: "Error", andMessage: emptyTextField!.accessibilityHint ?? "Zorro", needCancel: false, completion: { _ in })
            return false
        }
        
        guard isNetworkAvailable else {
            self.showAlertView(withTitle: "Info", andMessage: "", needCancel: false, completion: { _ in })
            return false
        }
        
        return true
    }
    
    
    // MARK: - Actions
    @IBAction func changeKeyTypePressed(_ sender: Any) {
        switch self.activeViewController {
        case is ActiveKeyShowViewController:
            self.router?.routeToPostingKeyScene()
            
        default:
            self.router?.routeToActiveKeyScene()
        }
    }

    @IBAction func enterButtonPressed(_ sender: Any) {
        if self.isRequestAvailable() {
            self.enterButtonSpinner.startAnimating()
            self.enterButton.isEnabled      =   false
            self.cancelButton.isEnabled     =   false

            // API 'login'
            let requestModel = LogInShowModels.Parameters.RequestModel(userName:    self.textFieldsCollection!.first!.text!,
                                                                       wif:         self.textFieldsCollection!.last!.text!,
                                                                       wifType:     self.textFieldsCollection!.last!.tag)
            interactor?.authorizeUser(withRequestModel: requestModel)
        }
    }
    
    @IBAction func registerButtonPressed(_ sender: Any) {
        router?.showRegisterFormOnline()
    }
}


// MARK: - LogInShowDisplayLogic
extension LogInShowViewController: LogInShowDisplayLogic {
    func displayAuthorizeUser(fromViewModel viewModel: LogInShowModels.Parameters.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.success else {
            self.showAlertView(withTitle: "Error", andMessage: "Login error", needCancel: false, completion: { _ in
                self.enterButtonSpinner.stopAnimating()
            })
            
            return
        }
        
        self.enterButtonSpinner.stopAnimating()
        self.enterButton.isEnabled      =   true
        self.cancelButton.isEnabled     =   true
        
        self.performSegue(withIdentifier: "FeedPostsShowSceneSegue", sender: nil)
    }
}
