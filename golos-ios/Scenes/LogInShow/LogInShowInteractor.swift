//
//  LogInShowInteractor.swift
//  golos-ios
//
//  Created by msm72 on 12.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Business Logic protocols
protocol LogInShowBusinessLogic {
    func authorizeUser(withRequestModel requestModel: LogInShowModels.Parameters.RequestModel)
}

class LogInShowInteractor: LogInShowBusinessLogic {
    // MARK: - Properties
    var presenter: LogInShowPresentationLogic?
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func authorizeUser(withRequestModel requestModel: LogInShowModels.Parameters.RequestModel) {
        // AP 'get_accounts'
        UserManager().loadUsers(byNames: [requestModel.userName], completion: { [weak self] (displayedUsers, errorAPI) in
            guard errorAPI == nil else {
                return
            }
            
            guard let user = displayedUsers?.first else {
                return
            }
            
            // Prepare & Display user info
            let privateKey  =   PrivateKey.init(requestModel.wif)
            let publicKey   =   privateKey!.createPublic(prefix: .mainNet)
            var success     =   false
            
            switch requestModel.wifType {
            // Posting key
            case 1:
                success     =   (user.postingKey?.contains(publicKey.address))!
                
            // Active key
            case 2:
                success     =   (user.activeKey?.contains(publicKey.address))!

            default:
                break
            }
            
            // Save Private key in Keychain
            if success {
                _ = KeychainManager.save(requestModel.wif, forUserName: requestModel.userName)
            }

            let responseModel = LogInShowModels.Parameters.ResponseModel(success: success)
            self?.presenter?.presentAuthorizeUser(fromResponseModel: responseModel)
        })
    }
}
