//
//  LogInShowRouter.swift
//  golos-ios
//
//  Created by msm72 on 10.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
@objc protocol LogInShowRoutingLogic {
    func routeToActiveKeyScene()
    func routeToPostingKeyScene()
    func showRegisterFormOnline()
    func updateActiveViewController()
    func remove(inactiveViewController: BaseViewController?)
}

class LogInShowRouter: NSObject, LogInShowRoutingLogic {
    // MARK: - Properties
    weak var viewController: LogInShowViewController?
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Routing
    func routeToPostingKeyScene() {
        self.tuneTitles()
        self.viewController?.postingKeyShowVC = UIStoryboard(name: "LogInShow", bundle: nil).instantiateViewController(withIdentifier: "PostingKeyShowVC") as? PostingKeyShowViewController
        
        self.viewController?.activeViewController = viewController?.postingKeyShowVC
        
        // Handler Return completion
        self.viewController?.postingKeyShowVC?.handlerReturnComletion = { [weak self] collection in
            self?.viewController?.textFieldsCollection = collection
        }
    }
    
    func routeToActiveKeyScene() {
        self.tuneTitles()
        self.viewController?.activeKeyShowVC = UIStoryboard(name: "LogInShow", bundle: nil).instantiateViewController(withIdentifier: "ActiveKeyShowVC") as? ActiveKeyShowViewController
        
        self.viewController?.activeViewController = viewController?.activeKeyShowVC
        
        // Handler Return completion
        self.viewController?.activeKeyShowVC?.handlerReturnComletion = { [weak self] collection in
            self?.viewController?.textFieldsCollection = collection
        }
    }

    
    // MARK: - UIContainerView
    func remove(inactiveViewController: BaseViewController?) {
        if let inactiveVC = inactiveViewController {
            UIView.animate(withDuration: 0.2, animations: {
                inactiveVC.view.transform = CGAffineTransform(translationX: (self.viewController?.animationDirection == .fromRightToLeft) ? -1000 : 1000, y: 0)
            }, completion: { _ in
                inactiveVC.willMove(toParentViewController: nil)
                inactiveVC.view.removeFromSuperview()
                inactiveVC.removeFromParentViewController()
                
                self.updateActiveViewController()
            })
        }
    }
    
    func updateActiveViewController() {
        self.tuneTitles()
        
        if let activeVC = self.viewController?.activeViewController {
            if self.viewController?.animationDirection == nil {
                addActiveViewController(activeVC)
            }
            
            else {
                self.addActiveViewController(activeVC)
                
                UIView.animate(withDuration: 0.2, animations: {
                    activeVC.view.transform = CGAffineTransform(translationX: (self.viewController?.animationDirection == .fromRightToLeft) ? -1000 : 1000, y: 0)
                })
            }
        }
    }
    
    private func addActiveViewController(_ activeVC: BaseViewController) {
        self.viewController?.addChildViewController(activeVC)
        
        if self.viewController?.animationDirection == nil {
            activeVC.view.frame = self.viewController!.containerView.bounds
        }
        
        else {
            activeVC.view.frame = CGRect.init(origin:   CGPoint.init(x: ((self.viewController?.animationDirection == .fromRightToLeft) ? 1000 : -1000), y: 0),
                                              size:     self.viewController!.containerView.bounds.size)
        }
        
        self.viewController?.containerView.addSubview(activeVC.view)
        activeVC.didMove(toParentViewController: self.viewController)
    }
    
    private func tuneTitles() {
        switch viewController!.activeViewController {
        case is ActiveKeyShowViewController:
            self.viewController?.navigationItem.title = "Enter With Active Key".localized()
            self.viewController?.changeKeyTypeButton.setTitle("Enter With Posting Key".localized(), for: .normal)

        default:
            self.viewController?.navigationItem.title = "Enter With Posting Key".localized()
            self.viewController?.changeKeyTypeButton.setTitle("Enter With Active Key".localized(), for: .normal)
        }
    }
    

    // MARK: - Routing
    func showRegisterFormOnline() {
        guard isNetworkAvailable else {
            viewController?.showAlertView(withTitle: "Info", andMessage: "No Internet Connection", needCancel: false, completion: { _ in })
            return
        }
        
        guard let moreUrl = URL.init(string: ConstantsApp.Urls.registration) else {
            viewController?.showAlertView(withTitle: "Error", andMessage: "Developer error!", needCancel: false, completion: { _ in })
            return
        }
        
        if #available(iOS 10.0, *) {
            UIApplication.shared.open(moreUrl, options: [:], completionHandler: nil)
        }
            
        else {
            UIApplication.shared.openURL(moreUrl)
        }
    }

    /*
    func navigateBetweenContainerSubviews() {
        // Apply Container childVC
        viewController?.postingKeyShowVC = UIStoryboard(name: "LogInShow", bundle: nil).instantiateViewController(withIdentifier: "PostingKeyShowVC") as? PostingKeyShowViewController
        
        // PostingKeyShowViewController: SignIn button handler
        viewController.signInContainerShowVC?.handlerPassDataCompletion = { successCode in
            self.statusCodeNote = StatusCodeNote(rawValue: successCode as! Int)
            self.navigateAuthorizedUser(duringStartApp: false)
            
            // Clean UserDefaults
            UserDefaults.standard.removePersistentDomain(forName: Bundle.main.bundleIdentifier!)
        }
        
        // Handler: SignInContainerShowVC success Authorization completion
        viewController.signInContainerShowVC?.handlerAuthorizationButtonCompletion = { _ in
            self.viewController.signUpShowVC = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "SignUpShowVC") as? SignUpShowViewController
            
            // Handler: SignUpShowVC success Register completion
            self.viewController.signUpShowVC?.handlerRegisterButtonCompletion = { _ in
                self.viewController.signInContainerShowVC!.didCleanTextFields()
                self.viewController.activeViewController = self.viewController.signInContainerShowVC
            }
            
            // Handler: SignUpShowVC success Cancel completion
            self.viewController.signUpShowVC?.handlerCancelButtonCompletion = { _ in
                self.viewController.activeViewController = self.viewController.signInContainerShowVC
            }
            
            self.viewController.activeViewController = self.viewController.signUpShowVC
        }
        
        // Handler: SignInContainerShowVC success ForgotPassword completion
        viewController.signInContainerShowVC?.handlerForgotPasswordButtonCompletion = { _ in
            // Create ForgotPasswordViewController
            self.viewController.forgotPasswordShowVC = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "ForgotPasswordShowVC") as? ForgotPasswordShowViewController
            
            // Handler: ForgotPasswordShowVC success Send completion
            self.viewController.forgotPasswordShowVC?.handlerSendButtonCompletion = { _ in
                // Create EnterCodeShowViewController
                self.viewController.enterCodeShowViewController = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "EnterCodeShowVC") as? EnterCodeShowViewController
                
                // Handler: EnterCodeShowVC success Send completion
                self.viewController.enterCodeShowViewController?.handlerSendButtonCompletion = { _ in
                    // Create RepetitionPasswordShow scene
                    self.viewController.repetitionPasswordShowViewController = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "RepetitionPasswordShowVC") as? RepetitionPasswordShowViewController
                    
                    // Handler: RepetitionPasswordShowVC success Send completion
                    self.viewController.repetitionPasswordShowViewController?.handlerSendButtonCompletion = { _ in
                        self.viewController.signInContainerShowVC?.didCleanTextFields()
                        self.viewController.activeViewController = self.viewController.signInContainerShowVC
                        
                        // Clean UserDefaults
                        UserDefaults.standard.removePersistentDomain(forName: Bundle.main.bundleIdentifier!)
                    }
                    
                    // Handler: RepetitionPasswordShowVC success Cancel completion
                    self.viewController.repetitionPasswordShowViewController?.handlerCancelButtonCompletion = { _ in
                        self.viewController.activeViewController = self.viewController.enterCodeShowViewController
                    }
                    
                    self.viewController.activeViewController = self.viewController.repetitionPasswordShowViewController
                }
                
                // EnterCodeShowVC: Cancel button handler
                self.viewController.enterCodeShowViewController?.handlerCancelButtonCompletion = { _ in
                    self.viewController.activeViewController = self.viewController.forgotPasswordShowVC
                }
                
                self.viewController.activeViewController = self.viewController.enterCodeShowViewController
            }
            
            // ForgotPasswordShowVC: Cancel button handler
            self.viewController.forgotPasswordShowVC?.handlerCancelButtonCompletion = { _ in
                self.didActiveViewControllerLoad()
            }
            
            self.viewController.activeViewController = self.viewController.forgotPasswordShowVC
            
            // Hide social buttons view
            UIView.animate(withDuration: 0.3) {
                self.viewController.vkontakteButton.isHidden = true
                self.viewController.googleButton.isHidden = true
                self.viewController.facebookButton.isHidden = true
            }
        }
    }
 */
}
