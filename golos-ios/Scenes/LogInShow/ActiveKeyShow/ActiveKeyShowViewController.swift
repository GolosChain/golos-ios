//
//  ActiveKeyShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 10.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift
import IQKeyboardManagerSwift

class ActiveKeyShowViewController: GSBaseViewController {
    // MARK: - Properties
    var router: (NSObjectProtocol & ActiveKeyShowRoutingLogic)?
    var handlerReturnComletion: (([UITextField]) -> Void)?

    
    // MARK: - IBOutlets
    @IBOutlet weak var loginTextField: UITextField! {
        didSet {
            loginTextField.tune(withPlaceholder:        "Enter Login Placeholder",
                                textColors:             blackWhiteColorPickers,
                                font:                   UIFont.init(name: "SFUIDisplay-Regular", size: 16.0 * widthRatio),
                                alignment:              .left)
            
            loginTextField.delegate = self
        }
    }
    
    @IBOutlet weak var activeKeyTextField: UITextField! {
        didSet {
            activeKeyTextField.tune(withPlaceholder:        "Enter Active Key Placeholder",
                                     textColors:             blackWhiteColorPickers,
                                     font:                   UIFont.init(name: "SFUIDisplay-Regular", size: 16.0 * widthRatio),
                                     alignment:              .left)
            
            let rightView                       =   UIView(frame: CGRect(x: 0.0, y: 0.0, width: 90.0 * widthRatio, height: activeKeyTextField.frame.height))
            activeKeyTextField.rightView        =   rightView
            activeKeyTextField.rightViewMode    =   .always
            
            activeKeyTextField.delegate         =   self
        }
    }
    
    @IBOutlet weak var activeKeyTextFieldTopConstraint: NSLayoutConstraint! {
        didSet {
            activeKeyTextFieldTopConstraint.constant *= (heightRatio < 1) ? heightRatio : 1
        }
    }

    @IBOutlet var textFieldsCollection: [UITextField]!
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let router                  =   ActiveKeyShowRouter()
        
        viewController.router       =   router
        router.viewController       =   viewController
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.tune()
    }
    
    
    // MARK: - Actions
    @IBAction func scanQRButtonPressed(_ sender: Any) {
        self.router?.routeToScannerShowScene()
    }
    
    @IBAction func helpButtonPressed(_ sender: Any) {
        self.router?.showLoginHelpShowScene()
    }
}


// MARK: - UITextFieldDelegate
extension ActiveKeyShowViewController: UITextFieldDelegate {
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        if textField == activeKeyTextField, let text = textField.text, !text.isEmpty {
            return (text.hasPrefix("1") || text.hasPrefix("5")) ? true : false
        }
        
        return true
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        self.handlerReturnComletion!(self.textFieldsCollection)
        
        if textField == activeKeyTextField, let text = textField.text, text.count == 0 {
            return (string == "1" || string == "5") ? true : false
        }
        
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case loginTextField:
            IQKeyboardManager.sharedManager().goNext()
            
        case activeKeyTextField:
            textField.resignFirstResponder()
            
        default:
            break
        }
        
        return true
    }
}
