//
//  UserProfileShowRouter.swift
//  golos-ios
//
//  Created by msm72 on 29.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
@objc protocol UserProfileShowRoutingLogic {
    func routeToSettingsShowScene()
    func routeToUserProfileScene(byUserName name: String)
    func routeToPostCreateScene(withType sceneType: SceneType)
    func routeToPostShowScene(withScrollToComments needScrolling: Bool)
    func routeToActiveVotersShowScene(withMode sceneMode: ActiveVoterMode)
    func routeToUserFollowersShowScene(withMode sceneMode: UserFollowerMode)
}

protocol UserProfileShowDataPassing {
    var dataStore: UserProfileShowDataStore? { get }
}

class UserProfileShowRouter: NSObject, UserProfileShowRoutingLogic, UserProfileShowDataPassing {
    // MARK: - Properties
    weak var viewController: UserProfileShowViewController?
    var dataStore: UserProfileShowDataStore?
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Routing
    func routeToPostShowScene(withScrollToComments needScrolling: Bool) {
        let storyboard                      =   UIStoryboard(name: "PostShow", bundle: nil)
        let destinationVC                   =   storyboard.instantiateViewController(withIdentifier: "PostShowVC") as! PostShowViewController
        destinationVC.scrollCommentsDown    =   needScrolling
        var destinationDS                   =   destinationVC.router!.dataStore!
        
        passDataToPostShowScene(source: dataStore!, destination: &destinationDS)
        navigateToPostShowScene(source: viewController!, destination: destinationVC)
        
        // Handlers
        destinationVC.handlerPostShowSceneClose     =   { [weak self] isPostContentModify in
            // Reload & refresh content of the current cell by indexPath
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1, execute: {
                if isPostContentModify, let activeVC = self?.viewController?.containerView.activeVC, let blogShortInfo = self?.dataStore?.selectedBlog, let indexPath = blogShortInfo.indexPath {
                    RestAPIManager.loadModifiedPost(author: blogShortInfo.author ?? "XXX", permlink: blogShortInfo.permlink ?? "XXX", postType: activeVC.postType, completion: { model in
                        if let blogEntity = model {
                            activeVC.postsList![indexPath.row] = blogEntity
                            activeVC.postsTableView.reloadRows(at: [indexPath], with: .automatic)
                        }
                    })
                }
            })
        }
    }

    func routeToSettingsShowScene() {
        let storyboard      =   UIStoryboard(name: "SettingsShow", bundle: nil)
        let destinationVC   =   storyboard.instantiateViewController(withIdentifier: "SettingsShowVC") as! SettingsShowViewController

        navigateToSettingsShowScene(source: viewController!, destination: destinationVC)
    }
    
    func routeToPostCreateScene(withType sceneType: SceneType) {
        let storyboard              =   UIStoryboard(name: "PostCreate", bundle: nil)
        let destinationVC           =   storyboard.instantiateViewController(withIdentifier: "PostCreateVC") as! PostCreateViewController
        destinationVC.sceneType     =   sceneType
        var destinationDS           =   destinationVC.router!.dataStore!
        
        passDataToPostCreateScene(postShortInfo: sceneType == .createComment ? self.dataStore!.selectedBlog! : self.dataStore!.commentReply!, destination: &destinationDS)
        navigateToPostCreateScene(source: viewController!, destination: destinationVC)
        
        // Handlers
        destinationVC.handlerSuccessCreatedItem     =   { [weak self] permlinkCreatedItem in
            // Reload posts in selected list
            if permlinkCreatedItem != "" {
                self?.viewController?.loadUserDetails(byCondition: (isRefreshData: true, isInfiniteScrolling: false))
            }
        }
    }
    
    func routeToUserProfileScene(byUserName name: String) {
        let storyboard              =   UIStoryboard(name: "UserProfileShow", bundle: nil)
        let destinationVC           =   storyboard.instantiateViewController(withIdentifier: "UserProfileShowVC") as! UserProfileShowViewController
        destinationVC.sceneMode     =   .preview
        var destinationDS           =   destinationVC.router!.dataStore!
        destinationDS.userNickName  =   name
        
        navigateToUserProfileScene(source: viewController!, destination: destinationVC)
    }

    func routeToActiveVotersShowScene(withMode sceneMode: ActiveVoterMode) {
        let storyboard                  =   UIStoryboard(name: "ActiveVotersShow", bundle: nil)
        let destinationVC               =   storyboard.instantiateViewController(withIdentifier: "ActiveVotersShowVC") as! ActiveVotersShowViewController
        var destinationDS               =   destinationVC.router!.dataStore!
        destinationDS.activeVoterMode   =   sceneMode
        
        passDataToUsersVoteShowScene(source: self.dataStore!, destination: &destinationDS)
        navigateToUsersVoteShowScene(source: viewController!, destination: destinationVC)
    }

    func routeToUserFollowersShowScene(withMode sceneMode: UserFollowerMode) {
        let storyboard                  =   UIStoryboard(name: "UserFollowersShow", bundle: nil)
        let destinationVC               =   storyboard.instantiateViewController(withIdentifier: "UserFollowersShowVC") as! UserFollowersShowViewController
        var destinationDS               =   destinationVC.router!.dataStore!
        destinationDS.userSubscribeMode =   sceneMode
        
        passDataToUserFollowersShowScene(source: self.dataStore!, destination: &destinationDS, sceneMode: sceneMode)
        navigateToUserFollowersShowScene(source: viewController!, destination: destinationVC)
    }

    
    // MARK: - Navigation
    func navigateToSettingsShowScene(source: UserProfileShowViewController, destination: SettingsShowViewController) {
        source.show(destination, sender: nil)
        viewController?.showNavigationBar()
        
        // Set StatusBarStyle
        viewController?.isStatusBarStyleLight = false
    }
    
    func navigateToPostShowScene(source: UserProfileShowViewController, destination: PostShowViewController) {
        viewController?.hideNavigationBar()
        source.show(destination, sender: nil)
        destination.loadPostContent()
    }
    
    func navigateToPostCreateScene(source: UserProfileShowViewController, destination: PostCreateViewController) {
        source.show(destination, sender: nil)
    }

    func navigateToUserProfileScene(source: UserProfileShowViewController, destination: UserProfileShowViewController) {
        source.show(destination, sender: nil)
    }

    func navigateToUsersVoteShowScene(source: UserProfileShowViewController, destination: ActiveVotersShowViewController) {
        source.show(destination, sender: nil)
    }

    func navigateToUserFollowersShowScene(source: UserProfileShowViewController, destination: UserFollowersShowViewController) {
        source.show(destination, sender: nil)
    }

    
    // MARK: - Passing data
    func passDataToPostShowScene(source: UserProfileShowDataStore, destination: inout PostShowDataStore) {
        destination.postType                =   PostsFeedType.blog
        destination.postShortInfo           =   source.selectedBlog
    }
    
    func passDataToPostCreateScene(postShortInfo: PostShortInfo, destination: inout PostCreateDataStore) {
        destination.commentTitle            =   postShortInfo.title
        destination.commentParentTag        =   postShortInfo.parentTag
        destination.commentParentAuthor     =   postShortInfo.parentAuthor
        destination.commentParentPermlink   =   postShortInfo.parentPermlink
    }
    
    func passDataToUsersVoteShowScene(source: UserProfileShowDataStore, destination: inout ActiveVotersShowDataStore) {
        destination.itemID                  =   source.selectedBlog!.id
        destination.permlink                =   source.selectedBlog!.permlink
        destination.authorNickName          =   source.selectedBlog!.author
    }

    func passDataToUserFollowersShowScene(source: UserProfileShowDataStore, destination: inout UserFollowersShowDataStore, sceneMode: UserFollowerMode) {
        destination.authorNickName          =   source.userNickName!
        destination.totalIems               =   Int(sceneMode == .followers ? source.userFollowersCount : source.userFollowingsCount)
    }
}
