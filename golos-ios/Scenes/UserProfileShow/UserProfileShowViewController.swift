//
//  UserProfileShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 29.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
protocol UserProfileShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: UserProfileShowModels.Something.ViewModel)
}

class UserProfileShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: UserProfileShowBusinessLogic?
    var router: (NSObjectProtocol & UserProfileShowRoutingLogic & UserProfileShowDataPassing)?
    
    
    // MARK: - IBOutlets
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   UserProfileShowInteractor()
        let presenter               =   UserProfileShowPresenter()
        let router                  =   UserProfileShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        let requestModel = UserProfileShowModels.Something.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
}


// MARK: - UserProfileShowDisplayLogic
extension UserProfileShowViewController: UserProfileShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: UserProfileShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}
