//
//  UserProfileShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 29.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift
import SwiftTheme
import MXParallaxHeader
import SWSegmentedControl

enum UserProfileSceneMode {
    case edit
    case preview
}

// MARK: - Input & Output protocols
protocol UserProfileShowDisplayLogic: class {
    func displayUserInfo(fromViewModel viewModel: UserProfileShowModels.UserInfo.ViewModel)
    func displayUserDetails(fromViewModel viewModel: UserProfileShowModels.UserDetails.ViewModel)
}

class UserProfileShowViewController: GSBaseViewController, ContainerViewSupport {
    // MARK: - Properties
    var sceneMode: UserProfileSceneMode         =   .edit
    var selectedSegmentIndex                    =   0
    let postFeedTypes: [PostsFeedType]          =   [ .blog, .reply ]
    let postItems: [String]                     =   [ "Posts", "Replies" ]
    var settinsShow: Bool                       =   false
    
    var interactor: UserProfileShowBusinessLogic?
    var router: (NSObjectProtocol & UserProfileShowRoutingLogic & UserProfileShowDataPassing)?
    
    lazy var segmentedControl: SWSegmentedControl = {
        let contolElement       =   SWSegmentedControl(frame: CGRect(origin: .zero, size: CGSize(width: 210.0 * widthRatio, height: 44.0 * heightRatio )))
        
        contolElement.items                     =   postItems.map({ $0.localized() })
        contolElement.selectedSegmentIndex      =   0
        contolElement.titleColor                =   UIColor(hexString: "#333333")
        contolElement.indicatorColor            =   UIColor(hexString: "#1298FF")
        contolElement.font                      =   UIFont(name: "SFProDisplay-Medium", size: 13.0)!
        contolElement.indicatorThickness        =   2.0 * heightRatio
        
        contolElement.delegate  =   self

        self.setActiveViewControllerHandlers()
        
        return contolElement
    }()

    
    // MARK: - IBOutlets
    @IBOutlet weak var contentView: UIView!
   
    // ContainerViewSupport implementation
    @IBOutlet weak var containerView: GSContainerView! {
        didSet {
            containerView.mainVC                =   self
            
            let firstViewController             =   UIStoryboard(name: "UserProfileShow", bundle: nil).instantiateViewController(withIdentifier: "UserProfileLentaShowVC") as! GSTableViewController
            firstViewController.cellIdentifier  =   "PostFeedTableViewCell"

            let secondViewController            =   UIStoryboard(name: "UserProfileShow", bundle: nil).instantiateViewController(withIdentifier: "UserProfileReplyShowVC") as! GSTableViewController
            secondViewController.cellIdentifier =   "ReplyTableViewCell"
            
            containerView.viewControllers       =   [ firstViewController, secondViewController ]
            
            containerView.setActiveViewController(index: 0)
        }
    }
    
    @IBOutlet var userProfileHeaderView: UserProfileHeaderView! {
        didSet {
            // Handlers
            userProfileHeaderView.handlerBackButtonTapped       =   { [weak self] in
                self?.navigationController?.popViewController(animated: true)
            }
            
            userProfileHeaderView.handlerEditButtonTapped       =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            userProfileHeaderView.handlerWriteButtonTapped      =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }

            userProfileHeaderView.handlerSettingsButtonTapped   =   { [weak self] in
                self?.settinsShow = true
                self?.router?.routeToSettingsShowScene()                
            }
            
            userProfileHeaderView.handlerSubscribeButtonTapped  =   { [weak self] in 
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
        }
    }
    
    @IBOutlet weak var userProfileInfoTitleView: UserProfileInfoTitleView! {
        didSet {
            userProfileInfoTitleView.tune()
        }
    }
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            // Parallax Header
            scrollView.parallaxHeader.view              =   userProfileHeaderView
            scrollView.parallaxHeader.height            =   180.0
            scrollView.parallaxHeader.mode              =   MXParallaxHeaderMode.fill
            scrollView.parallaxHeader.minimumHeight     =   20.0

            scrollView.parallaxHeader.delegate          =   self
            scrollView.delegate                         =   self
        }
    }
    
    @IBOutlet weak var segmentedControlView: UIView! {
        didSet {
            segmentedControlView.addSubview(self.segmentedControl)
            segmentedControlView.tune()
        }
    }

    @IBOutlet weak var walletBalanceView: UIView! {
        didSet {
            walletBalanceView.isHidden = true
            walletBalanceView.tune()
        }
    }

    @IBOutlet weak var walletBalanceViewHeightConstraint: NSLayoutConstraint! {
        didSet {
            walletBalanceViewHeightConstraint.constant = 44.0
        }
    }
    
    @IBOutlet weak var walletBalanceViewTopConstraint: NSLayoutConstraint! {
        didSet {
            walletBalanceViewTopConstraint.constant = walletBalanceView.isHidden ? -walletBalanceViewHeightConstraint.constant : 0.0
        }
    }

    @IBOutlet weak var scrollViewTopConstraint: NSLayoutConstraint! {
        didSet {
            self.scrollViewTopConstraint.constant = UIDevice.getDeviceScreenSize() == .iPhone4s ? -40.0 : -20.0
        }
    }
    
    @IBOutlet weak var userProfileInfoControlViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var userProfileInfoTitleViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var userProfileInfoTitleViewHeightConstraint: NSLayoutConstraint!
    
    @IBOutlet var heightsCollection: [NSLayoutConstraint]! {
        didSet {
            self.heightsCollection.forEach({ $0.constant *= heightRatio })
        }
    }
    
    @IBOutlet var widthsCollection: [NSLayoutConstraint]! {
        didSet {
            self.widthsCollection.forEach({ $0.constant *= widthRatio })
        }
    }
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   UserProfileShowInteractor()
        let presenter               =   UserProfileShowPresenter()
        let router                  =   UserProfileShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
       
        self.hideNavigationBar()
        self.settinsShow = false
        
        UIApplication.shared.statusBarStyle     =   User.fetch(byName: self.router!.dataStore!.userName ?? "")?.coverImageURL == nil ? .default : (scrollView.parallaxHeader.progress == 0.0 ? .default : .lightContent)

        // Load User info
        self.loadUserInfo()

        // Load User details
        self.loadUserDetails()
        
        self.localizeTitles()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    
        self.userProfileHeaderView.showLabelsForAnimationCollection(false)
        self.userProfileInfoTitleView.showLabelsForAnimationCollection(false)
    }
    
    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        // Wallet Balance View show/hide
        if !walletBalanceView.isHidden {
            view.bringSubviewToFront(walletBalanceView)
            walletBalanceViewTopConstraint.constant                 =   0.0
            userProfileInfoControlViewTopConstraint.constant        =   10.0
            walletBalanceView.add(shadow: true, onside: .bottom)
        }
        
        self.userProfileHeaderView.editProfileButton.isHidden   =   self.sceneMode == .edit ? false : true
        self.userProfileHeaderView.backButton.isHidden          =   self.sceneMode == .preview ? false : true
    }
    
    private func setActiveViewControllerHandlers() {
        if let activeVC = self.containerView.activeVC {
            activeVC.handlerAnswerButtonTapped      =   { [weak self] postShortInfo in
                self?.interactor?.save(commentReply: postShortInfo)
                self?.router?.routeToPostCreateScene(withType: .createCommentReply)
            }
            
            activeVC.handlerReplyTypeButtonTapped   =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerShareButtonTapped       =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerUpvotesButtonTapped     =   { [weak self] in
                self?.showAlertView(withTitle: "Info", andMessage: "In development", needCancel: false, completion: { _ in })
            }
            
            activeVC.handlerCommentsButtonTapped    =   { [weak self] postShortInfo in
                self?.interactor?.save(blog: postShortInfo)
                self?.router?.routeToPostCreateScene(withType: .createComment)
            }
            
            // Select Blog
            activeVC.handlerSelectItem              =   { [weak self] selectedBlog in
                if let blog = selectedBlog as? Blog {
                    self?.interactor?.save(blog: PostShortInfo(title:               blog.title,
                                                               author:              blog.author,
                                                               permlink:            blog.permlink,
                                                               indexPath:           nil,
                                                               parentAuthor:        blog.parentAuthor,
                                                               parentPermlink:      blog.parentPermlink))
                    self?.router?.routeToPostShowScene()
                }
            }
            
            // Reply handlers
            activeVC.handlerAuthorProfileImageButtonTapped    =   { [weak self] authorName in
                self?.router?.routeToUserProfileScene(byUserName: authorName)
            }
        }
    }
    
    override func localizeTitles() {
        self.userProfileInfoTitleView.labelsCollection.forEach({ $0.text = $0.accessibilityIdentifier!.localized() })
        self.segmentedControl.items = self.postItems.map({ $0.localized() })
    }
}


// MARK: - Load data from Blockchain by API
extension UserProfileShowViewController {
    // User Profile
    private func loadUserInfo() {
        let userInfoRequestModel = UserProfileShowModels.UserInfo.RequestModel()
        interactor?.loadUserInfo(withRequestModel: userInfoRequestModel)
    }
    
    // Blogs
    private func loadUserDetails() {
        if self.containerView.activeVC != nil {
            let userDetailsRequestModel = UserProfileShowModels.UserDetails.RequestModel(postFeedType: postFeedTypes[self.selectedSegmentIndex])
            interactor?.loadUserDetails(withRequestModel: userDetailsRequestModel)
        }
    }
}


// MARK: - Fetch data from CoreData
extension UserProfileShowViewController {
    // User Profile
    private func fetchUserInfo() {
        if let userEntity = User.fetch(byName: self.router!.dataStore!.userName ?? "") {
            self.userProfileInfoTitleViewHeightConstraint.constant = 58.0
            self.userProfileHeaderView.updateUI(fromUserInfo: userEntity)
            self.userProfileInfoTitleView.updateUI(fromUserInfo: userEntity)
            
            // Change profileInfoView height
            if let info = userEntity.about, !info.isEmpty {
                userProfileInfoTitleViewHeightConstraint.constant *= 2
            }
        }
    }
    
    // User Details
    private func fetchUserDetails() {
        if let activeVC = self.containerView.activeVC {
            activeVC.fetchPosts(byParameters: (author: self.router?.dataStore?.userName, postFeedType: postFeedTypes[self.selectedSegmentIndex], permlink: nil, sortBy: nil))
            
            // Handler Refresh/Infinite Scrolling data
            activeVC.handlerRefreshData  =   { [weak self] lastItem in
                self?.interactor?.save(lastItem: lastItem)
                self?.loadUserDetails()
            }
        }
    }
}


// MARK: - UserProfileShowDisplayLogic
extension UserProfileShowViewController: UserProfileShowDisplayLogic {
    func displayUserInfo(fromViewModel viewModel: UserProfileShowModels.UserInfo.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let error = viewModel.error {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }

        // CoreData
        self.fetchUserInfo()
    }
    
    func displayUserDetails(fromViewModel viewModel: UserProfileShowModels.UserDetails.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let error = viewModel.error {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        self.fetchUserDetails()
    }
}


// MARK: - UIScrollViewDelegate
extension UserProfileShowViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        Logger.log(message: String(format: "scrollView.contentOffset.y %f", scrollView.contentOffset.y), event: .debug)
        Logger.log(message: String(format: "userProfileInfoTitleView.frame.midY %f", view.convert(userProfileInfoTitleView.frame, from: contentView).midY), event: .debug)
    }
}


// MARK: - MXParallaxHeaderDelegate
extension UserProfileShowViewController: MXParallaxHeaderDelegate {
    func parallaxHeaderDidScroll(_ parallaxHeader: MXParallaxHeader) {
        Logger.log(message: String(format: "progress %f", parallaxHeader.progress), event: .debug)

        guard !self.settinsShow else { return }
        
        UIApplication.shared.statusBarStyle = User.fetch(byName: (self.router?.dataStore?.userName)!)?.coverImageURL == nil ? .default : (parallaxHeader.progress == 0.0 ? .default : .lightContent)
        self.userProfileHeaderView.whiteStatusBarView.isHidden = parallaxHeader.progress != 0.0
    }
}


// MARK: - SWSegmentedControlDelegate
extension UserProfileShowViewController: SWSegmentedControlDelegate {
    func segmentedControl(_ control: SWSegmentedControl, didSelectItemAtIndex index: Int) {
        self.containerView.setActiveViewController(index: index)
        
        // Scroll content to first row
        if self.selectedSegmentIndex == index {
            if let activeVC = self.containerView.activeVC, activeVC.tableView.contentOffset.y > 0.0 {
                activeVC.tableView.scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: true)
            }
        }
        
        else {
            self.selectedSegmentIndex = index
            self.loadUserDetails()
        }
        
        self.setActiveViewControllerHandlers()
    }
    
    func segmentedControl(_ control: SWSegmentedControl, willDeselectItemAtIndex index: Int) {
    }
    
    func segmentedControl(_ control: SWSegmentedControl, didDeselectItemAtIndex index: Int) {
    }
    
    func segmentedControl(_ control: SWSegmentedControl, canSelectItemAtIndex index: Int) -> Bool {
        return true
    }
}
