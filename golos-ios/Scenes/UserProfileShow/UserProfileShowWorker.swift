//
//  UserProfileShowWorker.swift
//  golos-ios
//
//  Created by msm72 on 10.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift

typealias UserProfileDetailsParams    =   (type: PostsFeedType, lastItem: NSManagedObject?)

class UserProfileShowWorker {
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business Logic
    func prepareRequestMethod(byUsername userName: String, andParameters parameters: UserProfileDetailsParams) -> MethodAPIType {
        var methodAPIType: MethodAPIType
        let lastItem = parameters.lastItem
        var predicate: NSPredicate?
        
        switch parameters.type {
        // Replies
        case .reply:
            predicate       =   NSPredicate(format: "parentAuthor == %@", userName)

            methodAPIType   =   MethodAPIType.getUserReplies(startAuthor:           userName,
                                                             startPermlink:         (lastItem as? Reply)?.permlink,
                                                             limit:                 loadDataLimit,
                                                             voteLimit:             0)

        // Blogs
        default:
            predicate       =   NSPredicate(format: "author == %@", userName)

            let discussion  =   RequestParameterAPI.Discussion.init(limit:          loadDataLimit,
                                                                    truncateBody:   0,
                                                                    selectAuthors:  [ userName ],
                                                                    startAuthor:    (lastItem as? PostCellSupport)?.author,
                                                                    startPermlink:  (lastItem as? PostCellSupport)?.permlink)
            
            methodAPIType   =   MethodAPIType.getDiscussions(type: parameters.type, parameters: discussion)
        }
        
        // Clean Cache
        if isNetworkAvailable && lastItem == nil {
            CoreDataManager.instance.deleteEntities(withName: parameters.type.caseTitle(), andPredicateParameters: predicate, completion: { _ in })
        }
        
        return methodAPIType
    }
}
