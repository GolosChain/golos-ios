//
//  UserProfileShowInteractor.swift
//  golos-ios
//
//  Created by msm72 on 29.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift

// MARK: - Business Logic protocols
protocol UserProfileShowBusinessLogic {
    func saveLastReply(_ post: Reply?)
    func saveLastLenta(_ post: Lenta?)
    func loadUserInfo(withRequestModel requestModel: UserProfileShowModels.UserInfo.RequestModel)
    func loadUserDetails(withRequestModel requestModel: UserProfileShowModels.UserDetails.RequestModel)
}

protocol UserProfileShowDataStore {
    var lastReply: Reply? { get set }
    var lastLenta: Lenta? { get set }
}

class UserProfileShowInteractor: UserProfileShowBusinessLogic, UserProfileShowDataStore {
    // MARK: - Properties
    var presenter: UserProfileShowPresentationLogic?
    var worker: UserProfileShowWorker?

    
    // MARK: - UserProfileShowDataStore implementation
    var lastReply: Reply?
    var lastLenta: Lenta?

    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func saveLastReply(_ post: Reply?) {
        self.lastReply  =   post
    }
    
    func saveLastLenta(_ post: Lenta?) {
        self.lastLenta  =   post
    }
    
    func loadUserInfo(withRequestModel requestModel: UserProfileShowModels.UserInfo.RequestModel) {
        RestAPIManager.loadUsersInfo(byNames: [User.current!.name], completion: { errorAPI in
            if errorAPI == nil {
                RestAPIManager.loadUserFollowCounts(byName: User.current!.name, completion: { [weak self] error in
                    let userInfoResponseModel = UserProfileShowModels.UserInfo.ResponseModel(error: errorAPI)
                    self?.presenter?.presentUserInfo(fromResponseModel: userInfoResponseModel)
                })
            }
        })
    }
    
    func loadUserDetails(withRequestModel requestModel: UserProfileShowModels.UserDetails.RequestModel) {
        worker = UserProfileShowWorker()

        if let methodAPIType = worker?.prepareRequestMethod((type: requestModel.postFeedType, lastLentaPost: lastLenta, lastReplyPost: lastReply)) {
            RestAPIManager.loadPostsFeed(byMethodAPIType: methodAPIType, andPostFeedType: requestModel.postFeedType, completion: { [weak self] errorAPI in
                let userDetailsResponseModel = UserProfileShowModels.UserDetails.ResponseModel(error: errorAPI)
                self?.presenter?.presentUserDetails(fromResponseModel: userDetailsResponseModel)
            })
        }
    }
}
