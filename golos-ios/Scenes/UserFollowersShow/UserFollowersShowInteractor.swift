//
//  UserFollowersShowInteractor.swift
//  golos-ios
//
//  Created by msm72 on 10/29/18.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Business Logic protocols
protocol UserFollowersShowBusinessLogic {
    func subscribe(withRequestModel requestModel: UserFollowersShowModels.Sub.RequestModel)
    func loadFollowers(withRequestModel requestModel: UserFollowersShowModels.Item.RequestModel)
}

protocol UserFollowersShowDataStore {
    var totalItems: Int { get set }
    var needPagination: Bool { get set }
    var paginationPage: Int16 { get set }
    var authorNickName: String! { get set }
    var lastAuthorNickName: String? { get set }
    var userSubscribeMode: UserFollowerMode { get set }
}

@objc enum UserFollowerMode: Int {
    case followers      =   0
    case followings     =   1
}

class UserFollowersShowInteractor: UserFollowersShowBusinessLogic, UserFollowersShowDataStore {
    // MARK: - Properties
    var presenter: UserFollowersShowPresentationLogic?
    
    // UserFollowersShowDataStore protocol implementation
    var totalItems: Int = 0
    var needPagination: Bool = true
    var paginationPage: Int16 = 0
    var authorNickName: String!
    var lastAuthorNickName: String?
    var userSubscribeMode: UserFollowerMode = .followers
    
    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func subscribe(withRequestModel requestModel: UserFollowersShowModels.Sub.RequestModel) {
        RestAPIManager.subscribe(up: requestModel.willSubscribe, toAuthor: requestModel.authorNickName, completion: { [weak self] errorAPI in
            let isFollowing = errorAPI == nil && requestModel.willSubscribe
            
            let responseModel = UserFollowersShowModels.Sub.ResponseModel(isFollowing: isFollowing, authorNickName: requestModel.authorNickName, errorAPI: errorAPI)
            self?.presenter?.presentSubscribe(fromResponseModel: responseModel)
        })
    }

    func loadFollowers(withRequestModel requestModel: UserFollowersShowModels.Item.RequestModel) {
        if self.userSubscribeMode == .followers {
            RestAPIManager.loadFollowersList(byUserNickName: self.authorNickName, authorNickName: self.lastAuthorNickName ?? "", paginationPage: self.paginationPage, completion: { [weak self] (lastFollowerName, followersNames, errorAPI) in
                self?.handlerResponse(lastFollowerName: lastFollowerName, followersNames: followersNames, errorAPI: errorAPI)
            })
        }
        
        else {
            RestAPIManager.loadFollowingsList(byUserNickName: self.authorNickName, authorNickName: self.lastAuthorNickName ?? "", paginationPage: self.paginationPage, completion: { [weak self] (lastFollowingName, followingsNames, errorAPI) in
                self?.handlerResponse(lastFollowerName: lastFollowingName, followersNames: followingsNames, errorAPI: errorAPI)
            })
        }
    }
    
    private func handlerResponse(lastFollowerName: String?, followersNames: [String]?, errorAPI: ErrorAPI?) {
        guard errorAPI == nil else {
            let responseModel = UserFollowersShowModels.Item.ResponseModel(errorAPI: errorAPI)
            self.presenter?.presentLoadFollowers(fromResponseModel: responseModel)
            
            return
        }
        
        guard lastFollowerName != nil && self.needPagination else {
            self.needPagination     =   false
            let responseModel       =   UserFollowersShowModels.Item.ResponseModel(errorAPI: errorAPI)
            
            if let newItems = followersNames, newItems.count > 0 {
                self.loadInfo(forUsers: newItems)
            }
            
            else {
                self.presenter?.presentLoadFollowers(fromResponseModel: responseModel)
            }
            
            return
        }
        
        if let nickNames = followersNames, self.needPagination {
            self.loadInfo(forUsers: nickNames)
            self.lastAuthorNickName = lastFollowerName!
        }
    }
    
    private func loadInfo(forUsers nickNames: [String]) {
        RestAPIManager.loadUsersInfo(byNickNames: nickNames, completion: { [weak self] errorAPI in
            let responseModel = UserFollowersShowModels.Item.ResponseModel(errorAPI: errorAPI)
            self?.presenter?.presentLoadFollowers(fromResponseModel: responseModel)
        })
    }
}
