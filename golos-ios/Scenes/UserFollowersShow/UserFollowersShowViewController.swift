//
//  UserFollowersShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 10/29/18.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import GoloSwift
import SkeletonView

// MARK: - Input & Output protocols
protocol UserFollowersShowDisplayLogic: class {
    func displaySubscribe(fromViewModel viewModel: UserFollowersShowModels.Sub.ViewModel)
    func displayLoadFollowers(fromViewModel viewModel: UserFollowersShowModels.Item.ViewModel)
    func displayLoadFollowings(fromViewModel viewModel: UserFollowersShowModels.Item.ViewModel)
}

class UserFollowersShowViewController: GSBaseViewController {
    // MARK: - Properties
    var selectedVoterInRow: Int         =   0
    var isFetchInProgress: Bool         =   false
    var followers: [Follower]           =   [Follower]()
    var headerView: CommentHeaderView!
    
    var interactor: UserFollowersShowBusinessLogic?
    var router: (NSObjectProtocol & UserFollowersShowRoutingLogic & UserFollowersShowDataPassing)?
    
    var loadDataWorkItem: DispatchWorkItem!

    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            self.tableView.delegate     =   self
            self.tableView.dataSource   =   self
            
            if #available(iOS 10.0, *) {
                self.tableView.prefetchDataSource   =   self
            }
            
            self.tableView.tune()
            self.tableView.register(UINib(nibName: "ActiveUserTableViewCell", bundle: nil), forCellReuseIdentifier: "ActiveUserTableViewCell")
        }
    }

    @IBOutlet var heightsCollection: [NSLayoutConstraint]! {
        didSet {
            self.heightsCollection.forEach({ $0.constant *= heightRatio })
        }
    }

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   UserFollowersShowInteractor()
        let presenter               =   UserFollowersShowPresenter()
        let router                  =   UserFollowersShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // SkeletonView
        self.view.showSkeleton(usingColor: UIColor.clouds)
        
        // API
        self.loadDataSource()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.localizeTitles()
        self.showNavigationBar()
        
        // Set StatusBarStyle
        selectedTabBarItem          =   self.navigationController!.tabBarItem.tag
        self.isStatusBarStyleLight  =   false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        if let dataWorkItem = self.loadDataWorkItem, !dataWorkItem.isCancelled {
            dataWorkItem.cancel()
        }
    }

    
    // MARK: - Custom Functions
    override func localizeTitles() {
        if let dataStore = self.router?.dataStore {
            self.title = (dataStore.userSubscribeMode == .followers ? "Subscribers" : "Subscriptions").localized()
        }
    }
}


// MARK: - UserSubscribersShowDisplayLogic
extension UserFollowersShowViewController: UserFollowersShowDisplayLogic {
    func displaySubscribe(fromViewModel viewModel: UserFollowersShowModels.Sub.ViewModel) {
        let cell = self.tableView.cellForRow(at: IndexPath(row: self.selectedVoterInRow, section: 0)) as! ActiveUserTableViewCell
        
        // NOTE: Display the result from the Presenter
        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // Set post author subscribe button title
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5, execute: {
            self.showAlertView(withTitle:   viewModel.isFollowing ? "Subscribe Noun" : "Unsubscribe Noun",
                               andMessage:  (viewModel.isFollowing ? "Subscribe Success" : "Unsubscribe Success").localized() + " @\(viewModel.authorNickName)", needCancel: false, completion: { _ in
                                cell.subscribeButton.isSelected = viewModel.isFollowing
                                cell.subscribeButton.setTitle(viewModel.isFollowing ? "Subscriptions".localized() : "Subscribe Verb".localized(), for: .normal)
                                
                                UIView.animate(withDuration: 0.5, animations: {
                                    viewModel.isFollowing ? cell.subscribeButton.setBorder(color: UIColor(hexString: "#dbdbdb").cgColor, cornerRadius: 5.0) :
                                        cell.subscribeButton.fill(font: UIFont(name: "SFProDisplay-Medium", size: 10.0)!)
                                }, completion: { success in
                                    cell.subscribeActivityIndicator.stopAnimating()
                                })
            })
        })
    }

    func displayLoadFollowers(fromViewModel viewModel: UserFollowersShowModels.Item.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        else if let dataStore = self.router?.dataStore, dataStore.needPagination {
            DispatchQueue.main.async {
                self.fetchFollowers()
            }
        }
        
        // Display empty message
        else if var dataStore = self.router?.dataStore, dataStore.totalIems == -1 {
            dataStore.totalIems = 0
            self.tableView.reloadData()
            self.view.hideSkeleton()
        }
    }
    
    func displayLoadFollowings(fromViewModel viewModel: UserFollowersShowModels.Item.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let error = viewModel.errorAPI {
            self.showAlertView(withTitle: "Error", andMessage: error.localizedDescription, needCancel: false, completion: { _ in })
        }
        
        // CoreData
        else if let dataStore = self.router?.dataStore, dataStore.needPagination {
            DispatchQueue.main.async {
                self.fetchFollowings()
            }
        }
    }
}


// MARK: - Load data from Blockchain by API
extension UserFollowersShowViewController {
    func loadDataSource() {
        guard !self.isFetchInProgress && (self.router?.dataStore?.needPagination)! else {
            return
        }

        if let dataStore = self.router?.dataStore {
            if dataStore.userSubscribeMode == .followers {
                self.loadDataWorkItem = DispatchWorkItem {
                    let followersRequestModel = UserFollowersShowModels.Item.RequestModel()
                    self.interactor?.loadFollowers(withRequestModel: followersRequestModel)
                }
            }
                
            else {
                self.loadDataWorkItem = DispatchWorkItem {
                    let followingsRequestModel = UserFollowersShowModels.Item.RequestModel()
                    self.interactor?.loadFollowings(withRequestModel: followingsRequestModel)
                }
            }
        }
        
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.1, execute: self.loadDataWorkItem)
        self.isFetchInProgress = true
    }
}


// MARK: - Fetch data from CoreData
extension UserFollowersShowViewController {
    // User Profile
    private func fetchFollowers() {
        if var dataStore = self.router?.dataStore, dataStore.needPagination, let followersNew = Follower.loadFollowers(byUserNickName: dataStore.authorNickName, andPaginationPage: dataStore.paginationPage), followersNew.count > 0 {
            self.followers.append(contentsOf: followersNew)

            // Reload data in UITableView
            let newIndexPathsToReload = self.calculateIndexPathsToReload(from: followersNew)
            
            if dataStore.paginationPage == 0 {
                self.tableView.reloadData()
            }

            else {
                let indexPathsToReload = visibleIndexPathsToReload(intersecting: newIndexPathsToReload)
                self.tableView.reloadRows(at: indexPathsToReload, with: .fade)
            }
            
            dataStore.paginationPage += 1
            self.view.hideSkeleton()
            self.isFetchInProgress = false
        }
    }
    
    private func fetchFollowings() {
        
    }
}


// MARK: - SkeletonTableViewDataSource
extension UserFollowersShowViewController: SkeletonTableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let dataStore = self.router?.dataStore else {
            return 0
        }
        
        return dataStore.totalIems
    }
    
    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier {
        return "ActiveUserTableViewCell"
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell        =   tableView.dequeueReusableCell(withIdentifier: "ActiveUserTableViewCell") as! ActiveUserTableViewCell
        
        if !self.isLoadingCell(for: indexPath) {
            let follower = self.followers[indexPath.row]
            cell.display(author: follower, inRow: indexPath.row)
            
            // Handlers
            cell.handlerSubscribeButtonTapped           =   { [weak self] activeVoterShortInfo in
                guard (self?.isCurrentOperationPossible())! else { return }
                
                self?.selectedVoterInRow = activeVoterShortInfo.row
                
                guard activeVoterShortInfo.isSubscribe else {
                    // API 'Subscribe'
                    let requestModel = UserFollowersShowModels.Sub.RequestModel(willSubscribe: true, authorNickName: activeVoterShortInfo.nickName)
                    self?.interactor?.subscribe(withRequestModel: requestModel)
                    
                    // Run spinner
                    DispatchQueue.main.async {
                        cell.subscribeButton.setTitle(nil, for: .normal)
                        cell.subscribeActivityIndicator.startAnimating()
                    }
                    
                    return
                }
                
                // API 'Unsibscribe'
                self?.showAlertAction(withTitle: "Unsubscribe Verb", andMessage: String(format: "%@ @%@ ?", "Unsubscribe are you sure".localized(), activeVoterShortInfo.nickName), icon: activeVoterShortInfo.icon, actionTitle: "Cancel Subscribe Verb", needCancel: true, isCancelLeft: false, completion: { [weak self] success in
                    if success {
                        let requestModel = UserFollowersShowModels.Sub.RequestModel(willSubscribe: false, authorNickName: activeVoterShortInfo.nickName)
                        self?.interactor?.subscribe(withRequestModel: requestModel)
                        
                        // Run spinner
                        DispatchQueue.main.async {
                            cell.subscribeButton.setTitle(nil, for: .normal)
                            cell.subscribeActivityIndicator.startAnimating()
                        }
                    }
                        
                    else {
                        cell.subscribeActivityIndicator.stopAnimating()
                    }
                })
            }
            
            cell.handlerAuthorVoterTapped               =   { [weak self] voterNickName in
                self?.router?.routeToUserProfileShowScene(byUserNickName: voterNickName)
            }
        }
        
        return cell
    }
}


// MARK: - UITableViewDelegate
extension UserFollowersShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == self.followers.count - 6 && !self.isFetchInProgress && self.followers.count < self.router?.dataStore?.totalIems ?? 0 {
            self.loadDataSource()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 64.0
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return self.followers.count <= 0 ? 48.0 : 0.0
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = CommentHeaderView.init(frame: CGRect(origin: .zero, size: CGSize(width: tableView.frame.width, height: 48.0)))

        // Display empty message
        if let dataStore = self.router?.dataStore, dataStore.totalIems == 0 {
            headerView.set(mode: .headerEmpty)
            headerView.emptyItemsLabel.text             =   (dataStore.userSubscribeMode == .followers ? "Followers List is empty" : "Followings List is empty").localized()
            self.tableView.isUserInteractionEnabled     =   false
        }
        
        // Display spinner
        else {
            headerView.set(mode: .header)
        }
        
        return headerView
    }
}


// MARK: - UITableViewDataSourcePrefetching
extension UserFollowersShowViewController: UITableViewDataSourcePrefetching {
    private func isLoadingCell(for indexPath: IndexPath) -> Bool {
        return indexPath.row >= self.followers.count
    }
    
    private func visibleIndexPathsToReload(intersecting indexPaths: [IndexPath]) -> [IndexPath] {
        let indexPathsForVisibleRows    =   self.tableView.indexPathsForVisibleRows ?? []
        let indexPathsIntersection      =   Set(indexPathsForVisibleRows).intersection(indexPaths)
        
        return Array(indexPathsIntersection)
    }

    private func calculateIndexPathsToReload(from items: [Follower]) -> [IndexPath] {
        let startIndex  =   self.followers.count - items.count
        let endIndex    =   startIndex + items.count
        
        return (startIndex..<endIndex).map { IndexPath(row: $0, section: 0) }
    }
    
    func tableView(_ tableView: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {
        Logger.log(message: "Prefetching row of \(indexPaths)", event: .warning)

        if indexPaths.contains(where: self.isLoadingCell) {
            self.loadDataSource()
        }
    }
    
    func tableView(_ tableView: UITableView, cancelPrefetchingForRowsAt indexPaths: [IndexPath]) {
        Logger.log(message: "Cancel prefetch row of \(indexPaths)", event: .warning)
        
        if let dataWorkItem = self.loadDataWorkItem, !dataWorkItem.isCancelled {
            dataWorkItem.cancel()
        }
    }
}
