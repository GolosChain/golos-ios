//
//  ActiveVotersShowInteractor.swift
//  golos-ios
//
//  Created by msm72 on 10/25/18.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Business Logic protocols
protocol ActiveVotersShowBusinessLogic {
    func subscribe(withRequestModel requestModel: ActiveVotersShowModels.Sub.RequestModel)
    func loadActiveVoters(withRequestModel requestModel: ActiveVotersShowModels.Item.RequestModel)
}

protocol ActiveVotersShowDataStore {
    var itemID: Int64! { get set }
    var permlink: String! { get set }
    var authorNickName: String! { get set }
    var activeVoterMode: ActiveVoterMode! { get set }
}

@objc enum ActiveVoterMode: Int {
    case like
    case dislike
}

class ActiveVotersShowInteractor: ActiveVotersShowBusinessLogic, ActiveVotersShowDataStore {
    // MARK: - Properties
    var presenter: ActiveVotersShowPresentationLogic?
    
    // UsersVoteShowDataStore protocol implementation
    var itemID: Int64!
    var permlink: String!
    var authorNickName: String!
    var activeVoterMode: ActiveVoterMode!

    
    // MARK: - Class Initialization
    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    

    // MARK: - Business logic implementation
    func subscribe(withRequestModel requestModel: ActiveVotersShowModels.Sub.RequestModel) {
        RestAPIManager.subscribe(up: requestModel.willSubscribe, toAuthor: requestModel.authorNickName, completion: { [weak self] errorAPI in
            let isFollowing = errorAPI == nil && requestModel.willSubscribe
            
            let responseModel = ActiveVotersShowModels.Sub.ResponseModel(isFollowing: isFollowing, authorNickName: requestModel.authorNickName, errorAPI: errorAPI)
            self?.presenter?.presentSubscribe(fromResponseModel: responseModel)
        })
    }

    func loadActiveVoters(withRequestModel requestModel: ActiveVotersShowModels.Item.RequestModel) {
        RestAPIManager.loadActiveVoters(byNickName: self.authorNickName, permlink: self.permlink, itemID: self.itemID, completion: { [weak self] errorAPI in
            guard errorAPI == nil else {
                let responseModel = ActiveVotersShowModels.Item.ResponseModel(errorAPI: errorAPI)
                self?.presenter?.presentLoadActiveVoters(fromResponseModel: responseModel)
                
                return
            }
            
            if let nickNames = Voter.loadVoters(byPostID: (self?.itemID)!)?.compactMap({ $0.voter }) {
                self?.loadInfo(forUsers: nickNames)
            }
        })
    }
    
    private func loadInfo(forUsers nickNames: [String]) {
        RestAPIManager.loadUsersInfo(byNickNames: nickNames, completion: { [weak self] errorAPI in
            let responseModel = ActiveVotersShowModels.Item.ResponseModel(errorAPI: errorAPI)
            self?.presenter?.presentLoadActiveVoters(fromResponseModel: responseModel)
        })
    }
}
