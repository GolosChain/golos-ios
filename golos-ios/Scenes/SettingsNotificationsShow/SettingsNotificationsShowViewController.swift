//
//  SettingsNotificationsShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 25.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift
import Localize_Swift

// MARK: - Input & Output protocols
protocol SettingsNotificationsShowDisplayLogic: class {
    func displayLoadPushNotificationsOptions(fromViewModel viewModel: SettingsNotificationsShowModels.Options.ViewModel)
    func displaySetPushNotificationsShowOptions(fromViewModel viewModel: SettingsNotificationsShowModels.Options.ViewModel)
}

class SettingsNotificationsShowViewController: GSBaseViewController {
    // MARK: - Properties
    var selectedOption: UIButton?
    private let appSettings = AppSettings.instance()
    
    var interactor: SettingsNotificationsShowBusinessLogic?
    var router: (NSObjectProtocol & SettingsNotificationsShowRoutingLogic & SettingsNotificationsShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet var switchesCollection: [UISwitch]!
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            self.scrollView.tune()
        }
    }
    
    @IBOutlet weak var contentView: UIView! {
        didSet {
            self.contentView.tune()
        }
    }
    
    @IBOutlet weak var topLineView: UIView! {
        didSet {
            topLineView.tune(withThemeColorPicker: lightGrayishBlueWhiteColorPickers)
        }
    }
    
    @IBOutlet weak var mentionsTitleLabel: UILabel! {
        didSet {
            self.mentionsTitleLabel.tune(withText:          " ",
                                         hexColors:         darkGrayWhiteColorPickers,
                                         font:              UIFont(name: "SFProDisplay-Medium", size: 14.0),
                                         alignment:         .left,
                                         isMultiLines:      true)
        }
    }
    
    @IBOutlet var titleLabelsCollection: [UILabel]! {
        didSet {
            self.titleLabelsCollection.forEach({ $0.tune(withText:          " ",
                                                         hexColors:         blackWhiteColorPickers,
                                                         font:              UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                                         alignment:         .left,
                                                         isMultiLines:      true)})
        }
    }
    
    @IBOutlet var grayViewsCollection: [UIView]! {
        didSet {
            self.grayViewsCollection.forEach({ $0.theme_backgroundColor = lightGrayishBlueBlackColorPickers })
        }
    }

    @IBOutlet var settingsButtonsCollection: [UIButton]! {
        didSet {
            self.settingsButtonsCollection.forEach({ $0.tune(withTitle:     $0.accessibilityLabel!.localized(),
                                                             hexColors:     [blackWhiteColorPickers, veryLightGrayColorPickers, blackWhiteColorPickers, veryLightGrayColorPickers],
                                                             font:          UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                                             alignment:     .left)})
        }
    }
    
    @IBOutlet var imageViewsCollection: [UIImageView]!
    
    @IBOutlet var hightsCollection: [NSLayoutConstraint]! {
        didSet {
            self.hightsCollection.forEach({ $0.constant *= heightRatio })
        }
    }

    @IBOutlet var widthsCollection: [NSLayoutConstraint]! {
        didSet {
            self.hightsCollection.forEach({ $0.constant *= widthRatio })
        }
    }

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   SettingsNotificationsShowInteractor()
        let presenter               =   SettingsNotificationsShowPresenter()
        let router                  =   SettingsNotificationsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    private func setupNotificationsPropertiesValues() {
        self.switchesCollection.first(where: { $0.tag == 0 })?.isOn = self.appSettings.isPushNotificationSoundOn
        self.switchesCollection.first(where: { $0.tag == 1 })?.isOn = self.appSettings.isAllPushNotificationsOn
        
        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "vote" })?.isHighlighted = !self.appSettings.isPushNotificationVote
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "vote" })!.isSelected = self.appSettings.isPushNotificationVote

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "flag" })?.isHighlighted = !self.appSettings.isPushNotificationFlag
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "flag" })!.isSelected = self.appSettings.isPushNotificationFlag

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "transfer" })?.isHighlighted = !self.appSettings.isPushNotificationTransfer
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "transfer" })!.isSelected = self.appSettings.isPushNotificationTransfer

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "reply" })?.isHighlighted = !self.appSettings.isPushNotificationReply
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "reply" })!.isSelected = self.appSettings.isPushNotificationReply

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "subscribe" })?.isHighlighted = !self.appSettings.isPushNotificationSubscribe
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "subscribe" })!.isSelected = self.appSettings.isPushNotificationSubscribe

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "unsubscribe" })?.isHighlighted = !self.appSettings.isPushNotificationUnsubscribe
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "unsubscribe" })!.isSelected = self.appSettings.isPushNotificationUnsubscribe

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "mention" })?.isHighlighted = !self.appSettings.isPushNotificationMention
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "mention" })!.isSelected = self.appSettings.isPushNotificationMention

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "repost" })?.isHighlighted = !self.appSettings.isPushNotificationRepost
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "repost" })!.isSelected = self.appSettings.isPushNotificationRepost

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "reward" })?.isHighlighted = !self.appSettings.isPushNotificationAward
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "reward" })!.isSelected = self.appSettings.isPushNotificationAward

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "curatorReward" })?.isHighlighted = !self.appSettings.isPushNotificationCuratorAward
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "curatorReward" })!.isSelected = self.appSettings.isPushNotificationCuratorAward

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "message" })?.isHighlighted = !self.appSettings.isPushNotificationMessage
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "message" })!.isSelected = self.appSettings.isPushNotificationMessage

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "witnessVote" })?.isHighlighted = !self.appSettings.isPushNotificationWitnessVote
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "witnessVote" })!.isSelected = self.appSettings.isPushNotificationWitnessVote

        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == "witnessCancelVote" })?.isHighlighted = !self.appSettings.isPushNotificationWitnessCancelVote
        self.settingsButtonsCollection.first(where: { $0.accessibilityIdentifier == "witnessCancelVote" })!.isSelected = self.appSettings.isPushNotificationWitnessCancelVote
    }

    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Set StatusBarStyle
        self.isStatusBarStyleLight = AppSettings.isAppThemeDark
        
        // Translate
        self.translateUI()
    }

    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        self.view.tune()
        self.showNavigationBar()
        self.title = "Settings Push Notifications".localized()

        let requestModel = SettingsNotificationsShowModels.Options.RequestModel(isShowAllNotificationsOptions: nil, requestParameterAPIPushOptions: nil)
        interactor?.loadPushNotificationsOptions(withRequestModel: requestModel)
    }
    
    private func translateUI() {
        self.mentionsTitleLabel.text = self.mentionsTitleLabel.accessibilityLabel?.localized()
        
        self.titleLabelsCollection.forEach({
            $0.text = $0.accessibilityLabel?.localized()
            
            if $0.tag == 1 {
                $0.text = "Settings Enable All Push Notifications".localized()
            }
        })
        
        self.settingsButtonsCollection.forEach({ $0.setTitle($0.accessibilityLabel!.localized(), for: .normal )})
        self.setupNotificationsPropertiesValues()
    }
    
    
    // MARK: - Actions
    @IBAction func soundSwitchChangeState(_ sender: UISwitch) {
        self.setBasicOption(soundOn: sender.isOn)
    }
    
    @IBAction func enableAllNotificationsSwitchChangeState(_ sender: UISwitch) {
        let requestModel = SettingsNotificationsShowModels.Options.RequestModel(isShowAllNotificationsOptions: sender.isOn, requestParameterAPIPushOptions: nil)
        interactor?.setPushNotificationsShowOptions(withRequestModel: requestModel)
    }
    
    // Settings buttons
    @IBAction func settingsButtonTapped(_ sender: UIButton) {
        self.selectedOption = sender
        self.imageViewsCollection.first(where: { $0.accessibilityIdentifier == sender.accessibilityIdentifier })?.isHighlighted = sender.isSelected

        let requestModel = SettingsNotificationsShowModels.Options.RequestModel(isShowAllNotificationsOptions:      nil,
                                                                                requestParameterAPIPushOptions:     RequestParameterAPI.PushOptions.init(languageValue:     Localize.currentLanguage(),
                                                                                                                                                         imageViews:        self.imageViewsCollection))
        interactor?.setPushNotificationsShowOptions(withRequestModel: requestModel)
   }
}


// MARK: - SettingsNotificationsShowDisplayLogic
extension SettingsNotificationsShowViewController: SettingsNotificationsShowDisplayLogic {
    func displayLoadPushNotificationsOptions(fromViewModel viewModel: SettingsNotificationsShowModels.Options.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.errorAPI == nil else {
            self.showAlertView(withTitle: "Error", andMessage: viewModel.errorAPI!.caseInfo.message, needCancel: false, completion: { [weak self] success in
                guard let strongSelf = self else { return }
                
                if viewModel.errorAPI!.caseInfo.code == 599 {
                    strongSelf.setupNotificationsPropertiesValues()
                }
            })
            
            return
        }
        
        self.setupNotificationsPropertiesValues()
    }
    
    func displaySetPushNotificationsShowOptions(fromViewModel viewModel: SettingsNotificationsShowModels.Options.ViewModel) {
        // NOTE: Display the result from the Presenter
        guard viewModel.errorAPI == nil else {
            self.showAlertView(withTitle: "Error", andMessage: viewModel.errorAPI!.caseInfo.message, needCancel: false, completion: { [weak self] success in
                guard let strongSelf = self else { return }
                
                if viewModel.errorAPI!.caseInfo.code == 599 {
                    strongSelf.setupNotificationsPropertiesValues()
                }
            })
            
            return
        }
        
        if let sender = self.selectedOption {
            sender.isSelected = !sender.isSelected
            self.appSettings.updatePushNotifications(property: sender.accessibilityIdentifier!, value: sender.isSelected)
            self.selectedOption = nil
        }
        
        self.setupNotificationsPropertiesValues()
    }
}


// MARK: - Microservices
extension SettingsNotificationsShowViewController {
    private func setBasicOption(soundOn: Bool) {
        MicroservicesManager.setBasicOptions(userNickName: User.current?.nickName ?? currentUserNickName!, deviceType: currentDeviceType, isDarkTheme: self.appSettings.isAppThemeDark, isFeedShowImages: self.appSettings.isFeedShowImages, isSoundOn: soundOn, completion: { [weak self] errorAPI in
            guard let strongSelf = self else { return }
            
            if errorAPI != nil {
                strongSelf.showAlertView(withTitle: "Error", andMessage: errorAPI!.caseInfo.message, needCancel: false, completion: { _ in })
            }
            
            strongSelf.appSettings.setPushNotificationSoundOn(value: soundOn)
        })
    }
}
