//
//  SettingsNotificationsShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 25.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
protocol SettingsNotificationsShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: SettingsNotificationsShowModels.Items.ViewModel)
}

class SettingsNotificationsShowViewController: GSBaseViewController {
    // MARK: - Properties
    var interactor: SettingsNotificationsShowBusinessLogic?
    var router: (NSObjectProtocol & SettingsNotificationsShowRoutingLogic & SettingsNotificationsShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var scrollView: UIScrollView!
    
    @IBOutlet weak var topLineView: UIView! {
        didSet {
            topLineView.tune(withThemeColorPicker: lightGrayishBlueWhiteColorPickers)
        }
    }
    
    @IBOutlet weak var titleLabel: UILabel! {
        didSet {
            titleLabel.tune(withText:           "MEMORIES".localized(),
                            hexColors:          darkGrayWhiteColorPickers,
                            font:               UIFont(name: "SFProDisplay-Regular", size: 12.0 * widthRatio),
                            alignment:          .left,
                            isMultiLines:       false)
        }
    }
    
    @IBOutlet weak var contentView: UIView! {
        didSet {
            contentView.tune(withThemeColorPicker: whiteBlackColorPickers)
        }
    }
    
    @IBOutlet var labelsCollection: [UILabel]! {
        didSet {
            _ = labelsCollection.map({ $0.tune(withText:        $0.text!.localized(),
                                               hexColors:       blackWhiteColorPickers,
                                               font:            UIFont(name: "SF Pro Display-Regular", size: 14.0 * widthRatio),
                                               alignment:       .left,
                                               isMultiLines:    false)})
        }
    }
    
    @IBOutlet var switchesCollection: [UISwitch]! {
        didSet {
            _ = switchesCollection.map({ switcher in
                switcher.setOn(false, animated: false)
                switcher.theme_onTintColor      =   switcher.isOn ? verySoftBlueColorPickers  :   grayishRedColorPickers
                switcher.theme_thumbTintColor   =   switcher.isOn ? vividBlueColorPickers     :   lightGrayishBlueWhiteColorPickers
            })
        }
    }
    
    @IBOutlet var switchesBackgroundsCollection: [UIView]! {
        didSet {
            _ = switchesBackgroundsCollection.map({ view in
                view.theme_backgroundColor      =   grayishRedColorPickers
                view.layer.cornerRadius         =   (view.bounds.height - 2) / 2 * heightRatio
            })
        }
    }
    
    @IBOutlet var hightsCollection: [NSLayoutConstraint]! {
        didSet {
            _ = hightsCollection.map({ $0.constant *= heightRatio })
        }
    }

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   SettingsNotificationsShowInteractor()
        let presenter               =   SettingsNotificationsShowPresenter()
        let router                  =   SettingsNotificationsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        self.title = "Remote Notifications Title".localized()
        
        let requestModel = SettingsNotificationsShowModels.Items.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    
    // MARK: - Actions
    @IBAction func switchChangeState(_ sender: UISwitch) {
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.05) {
            sender.theme_onTintColor        =   sender.isOn ? verySoftBlueColorPickers  :   grayishRedColorPickers
            sender.theme_thumbTintColor     =   sender.isOn ? vividBlueColorPickers     :   lightGrayishBlueWhiteColorPickers
        }
    }
}


// MARK: - SettingsNotificationsShowDisplayLogic
extension SettingsNotificationsShowViewController: SettingsNotificationsShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: SettingsNotificationsShowModels.Items.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}
