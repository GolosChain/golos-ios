//
//  SettingsNotificationsShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 25.07.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

@objc enum SettingsNotificationsMode: Int {
    case push
    case online
}

// MARK: - Input & Output protocols
protocol SettingsNotificationsShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: SettingsNotificationsShowModels.Items.ViewModel)
}

class SettingsNotificationsShowViewController: GSBaseViewController {
    // MARK: - Properties
    var settingsNotificationsMode: SettingsNotificationsMode = .online
    
    var interactor: SettingsNotificationsShowBusinessLogic?
    var router: (NSObjectProtocol & SettingsNotificationsShowRoutingLogic & SettingsNotificationsShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet var switchesCollection: [UISwitch]!
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            self.scrollView.tune()
        }
    }
    
    @IBOutlet weak var contentView: UIView! {
        didSet {
            self.contentView.tune()
        }
    }
    
    @IBOutlet weak var topLineView: UIView! {
        didSet {
            topLineView.tune(withThemeColorPicker: lightGrayishBlueWhiteColorPickers)
        }
    }
    
    @IBOutlet weak var mentionsTitleLabel: UILabel! {
        didSet {
            self.mentionsTitleLabel.tune(withText:          " ",
                                         hexColors:         darkGrayWhiteColorPickers,
                                         font:              UIFont(name: "SFProDisplay-Medium", size: 14.0),
                                         alignment:         .left,
                                         isMultiLines:      true)
        }
    }
    
    @IBOutlet var titleLabelsCollection: [UILabel]! {
        didSet {
            self.titleLabelsCollection.forEach({ $0.tune(withText:          " ",
                                                         hexColors:         blackWhiteColorPickers,
                                                         font:              UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                                         alignment:         .left,
                                                         isMultiLines:      true)})
        }
    }
    
    @IBOutlet var grayViewsCollection: [UIView]! {
        didSet {
            self.grayViewsCollection.forEach({ $0.theme_backgroundColor = lightGrayishBlueBlackColorPickers })
        }
    }

    @IBOutlet var settingsButtonsCollection: [UIButton]! {
        didSet {
            self.settingsButtonsCollection.forEach({ $0.tune(withTitle:     $0.accessibilityLabel!.localized(),
                                                             hexColors:     [blackWhiteColorPickers, veryLightGrayColorPickers, veryLightGrayColorPickers, veryLightGrayColorPickers],
                                                             font:          UIFont(name: "SFProDisplay-Regular", size: 14.0),
                                                             alignment:     .left)})
        }
    }
    
    @IBOutlet var imageViewsCollection: [UIImageView]! {
        didSet {
            self.imageViewsCollection.forEach({ $0.isHighlighted = true })
        }
    }
    
    @IBOutlet var hightsCollection: [NSLayoutConstraint]! {
        didSet {
            self.hightsCollection.forEach({ $0.constant *= heightRatio })
        }
    }

    @IBOutlet var widthsCollection: [NSLayoutConstraint]! {
        didSet {
            self.hightsCollection.forEach({ $0.constant *= widthRatio })
        }
    }

    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   SettingsNotificationsShowInteractor()
        let presenter               =   SettingsNotificationsShowPresenter()
        let router                  =   SettingsNotificationsShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.loadViewSettings()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Set StatusBarStyle
        self.isStatusBarStyleLight = AppSettings.isAppThemeDark
        
        // Translate
        self.translateUI()
    }

    
    // MARK: - Custom Functions
    private func loadViewSettings() {
        self.view.tune()
        self.showNavigationBar()
        self.title = (self.settingsNotificationsMode == .push ? "Settings Push Notifications" : "Settings Online Notifications").localized()

        let requestModel = SettingsNotificationsShowModels.Items.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    private func translateUI() {
        self.mentionsTitleLabel.text = self.mentionsTitleLabel.accessibilityLabel?.localized()
        
        self.titleLabelsCollection.forEach({
            $0.text = $0.accessibilityLabel?.localized()
            
            if $0.tag == 1 && self.settingsNotificationsMode == .push {
                $0.text = "Settings Enable All Push Notifications".localized()
            }
        })
        
        self.settingsButtonsCollection.forEach({ $0.setTitle($0.accessibilityLabel!.localized(), for: .normal )})
    }
    
    
    // MARK: - Actions
    @IBAction func soundSwitchChangeState(_ sender: UISwitch) {

    }
    
    @IBAction func enableAllNotificationsSwitchChangeState(_ sender: UISwitch) {

    }
}


// MARK: - SettingsNotificationsShowDisplayLogic
extension SettingsNotificationsShowViewController: SettingsNotificationsShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: SettingsNotificationsShowModels.Items.ViewModel) {
        // NOTE: Display the result from the Presenter

    }
}
