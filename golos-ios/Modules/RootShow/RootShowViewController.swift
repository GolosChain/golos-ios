//
//  RootShowViewController.swift
//  golos-ios
//
//  Created by msm72 on 02.06.2018.
//  Copyright (c) 2018 golos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoloSwift

// MARK: - Input & Output protocols
protocol RootShowDisplayLogic: class {
    func displaySomething(fromViewModel viewModel: RootShowModels.Something.ViewModel)
}

class RootShowViewController: UIViewController {
    // MARK: - Properties
    @objc let shapeLayer = CAShapeLayer()

    var interactor: RootShowBusinessLogic?
    var router: (NSObjectProtocol & RootShowRoutingLogic & RootShowDataPassing)?
    
    
    // MARK: - IBOutlets
    
    
    // MARK: - Class Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }

    deinit {
        Logger.log(message: "Success", event: .severe)
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   RootShowInteractor()
        let presenter               =   RootShowPresenter()
        let router                  =   RootShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.setupShapeLayer()
        self.loadViewSettings()
    }
    

    // MARK: - Custom Functions
    private func loadViewSettings() {
        self.startShapeLayerAnimate()
        
        let requestModel = RootShowModels.Something.RequestModel()
        interactor?.doSomething(withRequestModel: requestModel)
    }
    
    private func setupShapeLayer() {
        let circularPath        =   UIBezierPath(arcCenter:     self.view.center,
                                                 radius:        60.0 * widthRatio,
                                                 startAngle:    -CGFloat.pi / 2,
                                                 endAngle:      2 * CGFloat.pi,
                                                 clockwise:     true)
        
        shapeLayer.path         =   circularPath.cgPath
        shapeLayer.strokeColor  =   UIColor(hexString: "#2F73B5").cgColor
        shapeLayer.lineWidth    =   4.0 * widthRatio
        shapeLayer.fillColor    =   UIColor.clear.cgColor
        shapeLayer.lineCap      =   kCALineCapRound
        shapeLayer.strokeEnd    =   0.0
        
        view.layer.addSublayer(shapeLayer)
    }
    
    private func startShapeLayerAnimate() {
        let basicAnimation                      =   CABasicAnimation(keyPath: "strokeEnd")
        basicAnimation.toValue                  =   1
        basicAnimation.duration                 =   5.0
        basicAnimation.fillMode                 =   kCAFillModeForwards
        basicAnimation.isRemovedOnCompletion    =   false
        basicAnimation.timingFunction           =   CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        basicAnimation.repeatCount              =   1
        
        basicAnimation.delegate                 =   self
        
        shapeLayer.add(basicAnimation, forKey: "strokeEnd")
    }
    
    private func endShapeLayerAnimate() {
        shapeLayer.removeAllAnimations()
    }
}


// MARK: - RootShowDisplayLogic
extension RootShowViewController: RootShowDisplayLogic {
    func displaySomething(fromViewModel viewModel: RootShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
//        self.endShapeLayerAnimate()
    }
}


// MARK: - CAAnimationDelegate
extension RootShowViewController: CAAnimationDelegate {
    func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
        // TODO: - ADD TRANSITION TO NEXT SCENE
        
        endShapeLayerAnimate()
        Logger.log(message: "Animation did stop.", event: .severe)
        startShapeLayerAnimate()
    }
}
